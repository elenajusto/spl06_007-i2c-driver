
spl06_007-i2c-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d30  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e74  08002e74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e7c  08002e7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e80  08002e80  00012e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08002e90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002e90  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dbe7  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed7  00000000  00000000  0002dc5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  0002fb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008ba  00000000  00000000  00030660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017769  00000000  00000000  00030f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f41d  00000000  00000000  00048683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095e01  00000000  00000000  00057aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027c0  00000000  00000000  000ed8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000f0064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002dd4 	.word	0x08002dd4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002dd4 	.word	0x08002dd4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fa72 	bl	8000b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f807 	bl	8000636 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8dc 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f88c 	bl	8000748 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000630:	f000 f84a 	bl	80006c8 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	e7fe      	b.n	8000634 <main+0x18>

08000636 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000636:	b590      	push	{r4, r7, lr}
 8000638:	b093      	sub	sp, #76	; 0x4c
 800063a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063c:	2410      	movs	r4, #16
 800063e:	193b      	adds	r3, r7, r4
 8000640:	0018      	movs	r0, r3
 8000642:	2338      	movs	r3, #56	; 0x38
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f002 fb98 	bl	8002d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	003b      	movs	r3, r7
 800064e:	0018      	movs	r0, r3
 8000650:	2310      	movs	r3, #16
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f002 fb91 	bl	8002d7c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065a:	2380      	movs	r3, #128	; 0x80
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fe62 	bl	8001328 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	193b      	adds	r3, r7, r4
 8000666:	2202      	movs	r2, #2
 8000668:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	0052      	lsls	r2, r2, #1
 8000670:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2240      	movs	r2, #64	; 0x40
 800067c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	193b      	adds	r3, r7, r4
 8000686:	0018      	movs	r0, r3
 8000688:	f000 fe9a 	bl	80013c0 <HAL_RCC_OscConfig>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000690:	f000 f904 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	003b      	movs	r3, r7
 8000696:	2207      	movs	r2, #7
 8000698:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800069a:	003b      	movs	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	003b      	movs	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a6:	003b      	movs	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ac:	003b      	movs	r3, r7
 80006ae:	2100      	movs	r1, #0
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 f99f 	bl	80019f4 <HAL_RCC_ClockConfig>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006ba:	f000 f8ef 	bl	800089c <Error_Handler>
  }
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b013      	add	sp, #76	; 0x4c
 80006c4:	bd90      	pop	{r4, r7, pc}
	...

080006c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_I2C1_Init+0x74>)
 80006ce:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <MX_I2C1_Init+0x78>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_I2C1_Init+0x74>)
 80006d4:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <MX_I2C1_Init+0x7c>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_I2C1_Init+0x74>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x74>)
 8000704:	0018      	movs	r0, r3
 8000706:	f000 fcd1 	bl	80010ac <HAL_I2C_Init>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800070e:	f000 f8c5 	bl	800089c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x74>)
 8000714:	2100      	movs	r1, #0
 8000716:	0018      	movs	r0, r3
 8000718:	f000 fd6e 	bl	80011f8 <HAL_I2CEx_ConfigAnalogFilter>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000720:	f000 f8bc 	bl	800089c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <MX_I2C1_Init+0x74>)
 8000726:	2100      	movs	r1, #0
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fdb1 	bl	8001290 <HAL_I2CEx_ConfigDigitalFilter>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000732:	f000 f8b3 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000028 	.word	0x20000028
 8000740:	40005400 	.word	0x40005400
 8000744:	00303d5b 	.word	0x00303d5b

08000748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_USART2_UART_Init+0x94>)
 800074e:	4a24      	ldr	r2, [pc, #144]	; (80007e0 <MX_USART2_UART_Init+0x98>)
 8000750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000754:	22e1      	movs	r2, #225	; 0xe1
 8000756:	0252      	lsls	r2, r2, #9
 8000758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_USART2_UART_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_USART2_UART_Init+0x94>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_USART2_UART_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_USART2_UART_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000792:	0018      	movs	r0, r3
 8000794:	f001 fc90 	bl	80020b8 <HAL_UART_Init>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800079c:	f000 f87e 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART2_UART_Init+0x94>)
 80007a2:	2100      	movs	r1, #0
 80007a4:	0018      	movs	r0, r3
 80007a6:	f002 fa09 	bl	8002bbc <HAL_UARTEx_SetTxFifoThreshold>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007ae:	f000 f875 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_USART2_UART_Init+0x94>)
 80007b4:	2100      	movs	r1, #0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f002 fa40 	bl	8002c3c <HAL_UARTEx_SetRxFifoThreshold>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007c0:	f000 f86c 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <MX_USART2_UART_Init+0x94>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f002 f9be 	bl	8002b48 <HAL_UARTEx_DisableFifoMode>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007d0:	f000 f864 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	2000007c 	.word	0x2000007c
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b08b      	sub	sp, #44	; 0x2c
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	2414      	movs	r4, #20
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	0018      	movs	r0, r3
 80007f0:	2314      	movs	r3, #20
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f002 fac1 	bl	8002d7c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b27      	ldr	r3, [pc, #156]	; (8000898 <MX_GPIO_Init+0xb4>)
 80007fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000800:	2104      	movs	r1, #4
 8000802:	430a      	orrs	r2, r1
 8000804:	635a      	str	r2, [r3, #52]	; 0x34
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080a:	2204      	movs	r2, #4
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000818:	2120      	movs	r1, #32
 800081a:	430a      	orrs	r2, r1
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000822:	2220      	movs	r2, #32
 8000824:	4013      	ands	r3, r2
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_GPIO_Init+0xb4>)
 800082c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000830:	2101      	movs	r1, #1
 8000832:	430a      	orrs	r2, r1
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800083a:	2201      	movs	r2, #1
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000848:	2102      	movs	r1, #2
 800084a:	430a      	orrs	r2, r1
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000852:	2202      	movs	r2, #2
 8000854:	4013      	ands	r3, r2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800085a:	23a0      	movs	r3, #160	; 0xa0
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	2200      	movs	r2, #0
 8000860:	2120      	movs	r1, #32
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fc04 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000868:	0021      	movs	r1, r4
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2220      	movs	r2, #32
 800086e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2201      	movs	r2, #1
 8000874:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2202      	movs	r2, #2
 8000880:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000882:	187a      	adds	r2, r7, r1
 8000884:	23a0      	movs	r3, #160	; 0xa0
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	0011      	movs	r1, r2
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fa8c 	bl	8000da8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b00b      	add	sp, #44	; 0x2c
 8000896:	bd90      	pop	{r4, r7, pc}
 8000898:	40021000 	.word	0x40021000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	641a      	str	r2, [r3, #64]	; 0x40
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	2201      	movs	r2, #1
 80008c0:	4013      	ands	r3, r2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_MspInit+0x4c>)
 80008c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_MspInit+0x4c>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0549      	lsls	r1, r1, #21
 80008d0:	430a      	orrs	r2, r1
 80008d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	055b      	lsls	r3, r3, #21
 80008dc:	4013      	ands	r3, r2
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008e2:	23c0      	movs	r3, #192	; 0xc0
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 f994 	bl	8000c14 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b002      	add	sp, #8
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b097      	sub	sp, #92	; 0x5c
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	2344      	movs	r3, #68	; 0x44
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f002 fa36 	bl	8002d7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	2410      	movs	r4, #16
 8000912:	193b      	adds	r3, r7, r4
 8000914:	0018      	movs	r0, r3
 8000916:	2334      	movs	r3, #52	; 0x34
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f002 fa2e 	bl	8002d7c <memset>
  if(hi2c->Instance==I2C1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <HAL_I2C_MspInit+0xb8>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d13e      	bne.n	80009a8 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2220      	movs	r2, #32
 800092e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000936:	193b      	adds	r3, r7, r4
 8000938:	0018      	movs	r0, r3
 800093a:	f001 fa05 	bl	8001d48 <HAL_RCCEx_PeriphCLKConfig>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000942:	f7ff ffab 	bl	800089c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <HAL_I2C_MspInit+0xbc>)
 8000948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_I2C_MspInit+0xbc>)
 800094c:	2102      	movs	r1, #2
 800094e:	430a      	orrs	r2, r1
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_I2C_MspInit+0xbc>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000956:	2202      	movs	r2, #2
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800095e:	2144      	movs	r1, #68	; 0x44
 8000960:	187b      	adds	r3, r7, r1
 8000962:	22c0      	movs	r2, #192	; 0xc0
 8000964:	0092      	lsls	r2, r2, #2
 8000966:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2212      	movs	r2, #18
 800096c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2206      	movs	r2, #6
 800097e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	187b      	adds	r3, r7, r1
 8000982:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <HAL_I2C_MspInit+0xc0>)
 8000984:	0019      	movs	r1, r3
 8000986:	0010      	movs	r0, r2
 8000988:	f000 fa0e 	bl	8000da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_I2C_MspInit+0xbc>)
 800098e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_I2C_MspInit+0xbc>)
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	0389      	lsls	r1, r1, #14
 8000996:	430a      	orrs	r2, r1
 8000998:	63da      	str	r2, [r3, #60]	; 0x3c
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_I2C_MspInit+0xbc>)
 800099c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	039b      	lsls	r3, r3, #14
 80009a2:	4013      	ands	r3, r2
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b017      	add	sp, #92	; 0x5c
 80009ae:	bd90      	pop	{r4, r7, pc}
 80009b0:	40005400 	.word	0x40005400
 80009b4:	40021000 	.word	0x40021000
 80009b8:	50000400 	.word	0x50000400

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b097      	sub	sp, #92	; 0x5c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	2344      	movs	r3, #68	; 0x44
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	0018      	movs	r0, r3
 80009ca:	2314      	movs	r3, #20
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f002 f9d4 	bl	8002d7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d4:	2410      	movs	r4, #16
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	0018      	movs	r0, r3
 80009da:	2334      	movs	r3, #52	; 0x34
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f002 f9cc 	bl	8002d7c <memset>
  if(huart->Instance==USART2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <HAL_UART_MspInit+0xb8>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d13e      	bne.n	8000a6c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2202      	movs	r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 f9a3 	bl	8001d48 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a06:	f7ff ff49 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <HAL_UART_MspInit+0xbc>)
 8000a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <HAL_UART_MspInit+0xbc>)
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	0289      	lsls	r1, r1, #10
 8000a14:	430a      	orrs	r2, r1
 8000a16:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0xbc>)
 8000a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	029b      	lsls	r3, r3, #10
 8000a20:	4013      	ands	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_UART_MspInit+0xbc>)
 8000a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <HAL_UART_MspInit+0xbc>)
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	635a      	str	r2, [r3, #52]	; 0x34
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0xbc>)
 8000a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a36:	2201      	movs	r2, #1
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a3e:	2144      	movs	r1, #68	; 0x44
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2202      	movs	r2, #2
 8000a4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2201      	movs	r2, #1
 8000a50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	187a      	adds	r2, r7, r1
 8000a60:	23a0      	movs	r3, #160	; 0xa0
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 f99e 	bl	8000da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b017      	add	sp, #92	; 0x5c
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f89c 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ab6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab8:	f7ff fff7 	bl	8000aaa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	; (8000af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <LoopForever+0xe>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	; (8000b00 <LoopForever+0x16>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ae2:	f002 f953 	bl	8002d8c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ae6:	f7ff fd99 	bl	800061c <main>

08000aea <LoopForever>:

LoopForever:
  b LoopForever
 8000aea:	e7fe      	b.n	8000aea <LoopForever>
  ldr   r0, =_estack
 8000aec:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af8:	08002e84 	.word	0x08002e84
  ldr r2, =_sbss
 8000afc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b00:	20000114 	.word	0x20000114

08000b04 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC1_COMP_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_Init+0x3c>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_Init+0x3c>)
 8000b1a:	2180      	movs	r1, #128	; 0x80
 8000b1c:	0049      	lsls	r1, r1, #1
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 f810 	bl	8000b48 <HAL_InitTick>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d003      	beq.n	8000b34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	e001      	b.n	8000b38 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff feb8 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	781b      	ldrb	r3, [r3, #0]
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b50:	230f      	movs	r3, #15
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_InitTick+0x88>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d02b      	beq.n	8000bb8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_InitTick+0x8c>)
 8000b62:	681c      	ldr	r4, [r3, #0]
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_InitTick+0x88>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	0019      	movs	r1, r3
 8000b6a:	23fa      	movs	r3, #250	; 0xfa
 8000b6c:	0098      	lsls	r0, r3, #2
 8000b6e:	f7ff fac9 	bl	8000104 <__udivsi3>
 8000b72:	0003      	movs	r3, r0
 8000b74:	0019      	movs	r1, r3
 8000b76:	0020      	movs	r0, r4
 8000b78:	f7ff fac4 	bl	8000104 <__udivsi3>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 f905 	bl	8000d8e <HAL_SYSTICK_Config>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d112      	bne.n	8000bae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d80a      	bhi.n	8000ba4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	2301      	movs	r3, #1
 8000b92:	425b      	negs	r3, r3
 8000b94:	2200      	movs	r2, #0
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 f8e4 	bl	8000d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_InitTick+0x90>)
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	e00d      	b.n	8000bc0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e008      	b.n	8000bc0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bae:	230f      	movs	r3, #15
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	e003      	b.n	8000bc0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb8:	230f      	movs	r3, #15
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	781b      	ldrb	r3, [r3, #0]
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b005      	add	sp, #20
 8000bcc:	bd90      	pop	{r4, r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x1c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	001a      	movs	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x20>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	18d2      	adds	r2, r2, r3
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_IncTick+0x20>)
 8000bee:	601a      	str	r2, [r3, #0]
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000110 	.word	0x20000110

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <HAL_GetTick+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	20000110 	.word	0x20000110

08000c14 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	0019      	movs	r1, r3
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	fffff9ff 	.word	0xfffff9ff

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	0002      	movs	r2, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b7f      	cmp	r3, #127	; 0x7f
 8000c54:	d828      	bhi.n	8000ca8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c56:	4a2f      	ldr	r2, [pc, #188]	; (8000d14 <__NVIC_SetPriority+0xd4>)
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	33c0      	adds	r3, #192	; 0xc0
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	589b      	ldr	r3, [r3, r2]
 8000c66:	1dfa      	adds	r2, r7, #7
 8000c68:	7812      	ldrb	r2, [r2, #0]
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	400a      	ands	r2, r1
 8000c70:	00d2      	lsls	r2, r2, #3
 8000c72:	21ff      	movs	r1, #255	; 0xff
 8000c74:	4091      	lsls	r1, r2
 8000c76:	000a      	movs	r2, r1
 8000c78:	43d2      	mvns	r2, r2
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	019b      	lsls	r3, r3, #6
 8000c82:	22ff      	movs	r2, #255	; 0xff
 8000c84:	401a      	ands	r2, r3
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	4003      	ands	r3, r0
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c94:	481f      	ldr	r0, [pc, #124]	; (8000d14 <__NVIC_SetPriority+0xd4>)
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	33c0      	adds	r3, #192	; 0xc0
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ca6:	e031      	b.n	8000d0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <__NVIC_SetPriority+0xd8>)
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	0019      	movs	r1, r3
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	400b      	ands	r3, r1
 8000cb4:	3b08      	subs	r3, #8
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	3306      	adds	r3, #6
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	18d3      	adds	r3, r2, r3
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	1dfa      	adds	r2, r7, #7
 8000cc4:	7812      	ldrb	r2, [r2, #0]
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	2203      	movs	r2, #3
 8000cca:	400a      	ands	r2, r1
 8000ccc:	00d2      	lsls	r2, r2, #3
 8000cce:	21ff      	movs	r1, #255	; 0xff
 8000cd0:	4091      	lsls	r1, r2
 8000cd2:	000a      	movs	r2, r1
 8000cd4:	43d2      	mvns	r2, r2
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	019b      	lsls	r3, r3, #6
 8000cde:	22ff      	movs	r2, #255	; 0xff
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	2303      	movs	r3, #3
 8000cea:	4003      	ands	r3, r0
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf0:	4809      	ldr	r0, [pc, #36]	; (8000d18 <__NVIC_SetPriority+0xd8>)
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	001c      	movs	r4, r3
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	4023      	ands	r3, r4
 8000cfc:	3b08      	subs	r3, #8
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	430a      	orrs	r2, r1
 8000d02:	3306      	adds	r3, #6
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	18c3      	adds	r3, r0, r3
 8000d08:	3304      	adds	r3, #4
 8000d0a:	601a      	str	r2, [r3, #0]
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b003      	add	sp, #12
 8000d12:	bd90      	pop	{r4, r7, pc}
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	1e5a      	subs	r2, r3, #1
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	045b      	lsls	r3, r3, #17
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d301      	bcc.n	8000d34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d30:	2301      	movs	r3, #1
 8000d32:	e010      	b.n	8000d56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <SysTick_Config+0x44>)
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	425b      	negs	r3, r3
 8000d40:	2103      	movs	r1, #3
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff ff7c 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SysTick_Config+0x44>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SysTick_Config+0x44>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	210f      	movs	r1, #15
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	1c02      	adds	r2, r0, #0
 8000d74:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff ff5d 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b004      	add	sp, #16
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff ffbf 	bl	8000d1c <SysTick_Config>
 8000d9e:	0003      	movs	r3, r0
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db6:	e147      	b.n	8001048 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d100      	bne.n	8000dd0 <HAL_GPIO_Init+0x28>
 8000dce:	e138      	b.n	8001042 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d005      	beq.n	8000de8 <HAL_GPIO_Init+0x40>
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2203      	movs	r2, #3
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d130      	bne.n	8000e4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	409a      	lsls	r2, r3
 8000df6:	0013      	movs	r3, r2
 8000df8:	43da      	mvns	r2, r3
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	0013      	movs	r3, r2
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e1e:	2201      	movs	r2, #1
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	43da      	mvns	r2, r3
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	091b      	lsrs	r3, r3, #4
 8000e34:	2201      	movs	r2, #1
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2203      	movs	r2, #3
 8000e50:	4013      	ands	r3, r2
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d017      	beq.n	8000e86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	43da      	mvns	r2, r3
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d123      	bne.n	8000eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3208      	adds	r2, #8
 8000e9a:	0092      	lsls	r2, r2, #2
 8000e9c:	58d3      	ldr	r3, [r2, r3]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	691a      	ldr	r2, [r3, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	2107      	movs	r1, #7
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	409a      	lsls	r2, r3
 8000ec4:	0013      	movs	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	08da      	lsrs	r2, r3, #3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3208      	adds	r2, #8
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	6939      	ldr	r1, [r7, #16]
 8000ed8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	43da      	mvns	r2, r3
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	401a      	ands	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	409a      	lsls	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	23c0      	movs	r3, #192	; 0xc0
 8000f14:	029b      	lsls	r3, r3, #10
 8000f16:	4013      	ands	r3, r2
 8000f18:	d100      	bne.n	8000f1c <HAL_GPIO_Init+0x174>
 8000f1a:	e092      	b.n	8001042 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f1c:	4a50      	ldr	r2, [pc, #320]	; (8001060 <HAL_GPIO_Init+0x2b8>)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	3318      	adds	r3, #24
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	589b      	ldr	r3, [r3, r2]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	4013      	ands	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	220f      	movs	r2, #15
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	43da      	mvns	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	23a0      	movs	r3, #160	; 0xa0
 8000f44:	05db      	lsls	r3, r3, #23
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0x1ca>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a45      	ldr	r2, [pc, #276]	; (8001064 <HAL_GPIO_Init+0x2bc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d00d      	beq.n	8000f6e <HAL_GPIO_Init+0x1c6>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a44      	ldr	r2, [pc, #272]	; (8001068 <HAL_GPIO_Init+0x2c0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d007      	beq.n	8000f6a <HAL_GPIO_Init+0x1c2>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a43      	ldr	r2, [pc, #268]	; (800106c <HAL_GPIO_Init+0x2c4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_GPIO_Init+0x1be>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x1cc>
 8000f66:	2305      	movs	r3, #5
 8000f68:	e004      	b.n	8000f74 <HAL_GPIO_Init+0x1cc>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e002      	b.n	8000f74 <HAL_GPIO_Init+0x1cc>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <HAL_GPIO_Init+0x1cc>
 8000f72:	2300      	movs	r3, #0
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	2103      	movs	r1, #3
 8000f78:	400a      	ands	r2, r1
 8000f7a:	00d2      	lsls	r2, r2, #3
 8000f7c:	4093      	lsls	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f84:	4936      	ldr	r1, [pc, #216]	; (8001060 <HAL_GPIO_Init+0x2b8>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3318      	adds	r3, #24
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f92:	4b33      	ldr	r3, [pc, #204]	; (8001060 <HAL_GPIO_Init+0x2b8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	035b      	lsls	r3, r3, #13
 8000faa:	4013      	ands	r3, r2
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <HAL_GPIO_Init+0x2b8>)
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <HAL_GPIO_Init+0x2b8>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43da      	mvns	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	039b      	lsls	r3, r3, #14
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <HAL_GPIO_Init+0x2b8>)
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <HAL_GPIO_Init+0x2b8>)
 8000fe8:	2384      	movs	r3, #132	; 0x84
 8000fea:	58d3      	ldr	r3, [r2, r3]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	029b      	lsls	r3, r3, #10
 8001000:	4013      	ands	r3, r2
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800100c:	4914      	ldr	r1, [pc, #80]	; (8001060 <HAL_GPIO_Init+0x2b8>)
 800100e:	2284      	movs	r2, #132	; 0x84
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <HAL_GPIO_Init+0x2b8>)
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	58d3      	ldr	r3, [r2, r3]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	025b      	lsls	r3, r3, #9
 800102e:	4013      	ands	r3, r2
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800103a:	4909      	ldr	r1, [pc, #36]	; (8001060 <HAL_GPIO_Init+0x2b8>)
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	40da      	lsrs	r2, r3
 8001050:	1e13      	subs	r3, r2, #0
 8001052:	d000      	beq.n	8001056 <HAL_GPIO_Init+0x2ae>
 8001054:	e6b0      	b.n	8000db8 <HAL_GPIO_Init+0x10>
  }
}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b006      	add	sp, #24
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021800 	.word	0x40021800
 8001064:	50000400 	.word	0x50000400
 8001068:	50000800 	.word	0x50000800
 800106c:	50000c00 	.word	0x50000c00

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	0008      	movs	r0, r1
 800107a:	0011      	movs	r1, r2
 800107c:	1cbb      	adds	r3, r7, #2
 800107e:	1c02      	adds	r2, r0, #0
 8001080:	801a      	strh	r2, [r3, #0]
 8001082:	1c7b      	adds	r3, r7, #1
 8001084:	1c0a      	adds	r2, r1, #0
 8001086:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001088:	1c7b      	adds	r3, r7, #1
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d004      	beq.n	800109a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001090:	1cbb      	adds	r3, r7, #2
 8001092:	881a      	ldrh	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001098:	e003      	b.n	80010a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800109a:	1cbb      	adds	r3, r7, #2
 800109c:	881a      	ldrh	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e08f      	b.n	80011de <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2241      	movs	r2, #65	; 0x41
 80010c2:	5c9b      	ldrb	r3, [r3, r2]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d107      	bne.n	80010da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2240      	movs	r2, #64	; 0x40
 80010ce:	2100      	movs	r1, #0
 80010d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff fc0f 	bl	80008f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2241      	movs	r2, #65	; 0x41
 80010de:	2124      	movs	r1, #36	; 0x24
 80010e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2101      	movs	r1, #1
 80010ee:	438a      	bics	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	493b      	ldr	r1, [pc, #236]	; (80011e8 <HAL_I2C_Init+0x13c>)
 80010fc:	400a      	ands	r2, r1
 80010fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4938      	ldr	r1, [pc, #224]	; (80011ec <HAL_I2C_Init+0x140>)
 800110c:	400a      	ands	r2, r1
 800110e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d108      	bne.n	800112a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	0209      	lsls	r1, r1, #8
 8001124:	430a      	orrs	r2, r1
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	e007      	b.n	800113a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2184      	movs	r1, #132	; 0x84
 8001134:	0209      	lsls	r1, r1, #8
 8001136:	430a      	orrs	r2, r1
 8001138:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d109      	bne.n	8001156 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	0109      	lsls	r1, r1, #4
 8001150:	430a      	orrs	r2, r1
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	e007      	b.n	8001166 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4923      	ldr	r1, [pc, #140]	; (80011f0 <HAL_I2C_Init+0x144>)
 8001162:	400a      	ands	r2, r1
 8001164:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4920      	ldr	r1, [pc, #128]	; (80011f4 <HAL_I2C_Init+0x148>)
 8001172:	430a      	orrs	r2, r1
 8001174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	491a      	ldr	r1, [pc, #104]	; (80011ec <HAL_I2C_Init+0x140>)
 8001182:	400a      	ands	r2, r1
 8001184:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	431a      	orrs	r2, r3
 8001190:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69d9      	ldr	r1, [r3, #28]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1a      	ldr	r2, [r3, #32]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2101      	movs	r1, #1
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2241      	movs	r2, #65	; 0x41
 80011ca:	2120      	movs	r1, #32
 80011cc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2242      	movs	r2, #66	; 0x42
 80011d8:	2100      	movs	r1, #0
 80011da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	f0ffffff 	.word	0xf0ffffff
 80011ec:	ffff7fff 	.word	0xffff7fff
 80011f0:	fffff7ff 	.word	0xfffff7ff
 80011f4:	02008000 	.word	0x02008000

080011f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2241      	movs	r2, #65	; 0x41
 8001206:	5c9b      	ldrb	r3, [r3, r2]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b20      	cmp	r3, #32
 800120c:	d138      	bne.n	8001280 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2240      	movs	r2, #64	; 0x40
 8001212:	5c9b      	ldrb	r3, [r3, r2]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001218:	2302      	movs	r3, #2
 800121a:	e032      	b.n	8001282 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2240      	movs	r2, #64	; 0x40
 8001220:	2101      	movs	r1, #1
 8001222:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2241      	movs	r2, #65	; 0x41
 8001228:	2124      	movs	r1, #36	; 0x24
 800122a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2101      	movs	r1, #1
 8001238:	438a      	bics	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4911      	ldr	r1, [pc, #68]	; (800128c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001248:	400a      	ands	r2, r1
 800124a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6819      	ldr	r1, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2101      	movs	r1, #1
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2241      	movs	r2, #65	; 0x41
 8001270:	2120      	movs	r1, #32
 8001272:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2240      	movs	r2, #64	; 0x40
 8001278:	2100      	movs	r1, #0
 800127a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	e000      	b.n	8001282 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001280:	2302      	movs	r3, #2
  }
}
 8001282:	0018      	movs	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	ffffefff 	.word	0xffffefff

08001290 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2241      	movs	r2, #65	; 0x41
 800129e:	5c9b      	ldrb	r3, [r3, r2]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b20      	cmp	r3, #32
 80012a4:	d139      	bne.n	800131a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2240      	movs	r2, #64	; 0x40
 80012aa:	5c9b      	ldrb	r3, [r3, r2]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e033      	b.n	800131c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2240      	movs	r2, #64	; 0x40
 80012b8:	2101      	movs	r1, #1
 80012ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2241      	movs	r2, #65	; 0x41
 80012c0:	2124      	movs	r1, #36	; 0x24
 80012c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2101      	movs	r1, #1
 80012d0:	438a      	bics	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4a11      	ldr	r2, [pc, #68]	; (8001324 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2101      	movs	r1, #1
 8001302:	430a      	orrs	r2, r1
 8001304:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2241      	movs	r2, #65	; 0x41
 800130a:	2120      	movs	r1, #32
 800130c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2240      	movs	r2, #64	; 0x40
 8001312:	2100      	movs	r1, #0
 8001314:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800131a:	2302      	movs	r3, #2
  }
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b004      	add	sp, #16
 8001322:	bd80      	pop	{r7, pc}
 8001324:	fffff0ff 	.word	0xfffff0ff

08001328 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001336:	4013      	ands	r3, r2
 8001338:	0019      	movs	r1, r3
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	430a      	orrs	r2, r1
 8001340:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	429a      	cmp	r2, r3
 800134a:	d11f      	bne.n	800138c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	0013      	movs	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	189b      	adds	r3, r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4912      	ldr	r1, [pc, #72]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800135a:	0018      	movs	r0, r3
 800135c:	f7fe fed2 	bl	8000104 <__udivsi3>
 8001360:	0003      	movs	r3, r0
 8001362:	3301      	adds	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001366:	e008      	b.n	800137a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	3b01      	subs	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e001      	b.n	800137a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e009      	b.n	800138e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	401a      	ands	r2, r3
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	429a      	cmp	r2, r3
 800138a:	d0ed      	beq.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	40007000 	.word	0x40007000
 800139c:	fffff9ff 	.word	0xfffff9ff
 80013a0:	20000000 	.word	0x20000000
 80013a4:	000f4240 	.word	0x000f4240

080013a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	23e0      	movs	r3, #224	; 0xe0
 80013b2:	01db      	lsls	r3, r3, #7
 80013b4:	4013      	ands	r3, r2
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000

080013c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e2fe      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2201      	movs	r2, #1
 80013d8:	4013      	ands	r3, r2
 80013da:	d100      	bne.n	80013de <HAL_RCC_OscConfig+0x1e>
 80013dc:	e07c      	b.n	80014d8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013de:	4bc3      	ldr	r3, [pc, #780]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2238      	movs	r2, #56	; 0x38
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013e8:	4bc0      	ldr	r3, [pc, #768]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2203      	movs	r2, #3
 80013ee:	4013      	ands	r3, r2
 80013f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2b10      	cmp	r3, #16
 80013f6:	d102      	bne.n	80013fe <HAL_RCC_OscConfig+0x3e>
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d002      	beq.n	8001404 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2b08      	cmp	r3, #8
 8001402:	d10b      	bne.n	800141c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	4bb9      	ldr	r3, [pc, #740]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	029b      	lsls	r3, r3, #10
 800140c:	4013      	ands	r3, r2
 800140e:	d062      	beq.n	80014d6 <HAL_RCC_OscConfig+0x116>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d15e      	bne.n	80014d6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e2d9      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	025b      	lsls	r3, r3, #9
 8001424:	429a      	cmp	r2, r3
 8001426:	d107      	bne.n	8001438 <HAL_RCC_OscConfig+0x78>
 8001428:	4bb0      	ldr	r3, [pc, #704]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4baf      	ldr	r3, [pc, #700]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	0249      	lsls	r1, r1, #9
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e020      	b.n	800147a <HAL_RCC_OscConfig+0xba>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	23a0      	movs	r3, #160	; 0xa0
 800143e:	02db      	lsls	r3, r3, #11
 8001440:	429a      	cmp	r2, r3
 8001442:	d10e      	bne.n	8001462 <HAL_RCC_OscConfig+0xa2>
 8001444:	4ba9      	ldr	r3, [pc, #676]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4ba8      	ldr	r3, [pc, #672]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	02c9      	lsls	r1, r1, #11
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	4ba6      	ldr	r3, [pc, #664]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4ba5      	ldr	r3, [pc, #660]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0249      	lsls	r1, r1, #9
 800145c:	430a      	orrs	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	e00b      	b.n	800147a <HAL_RCC_OscConfig+0xba>
 8001462:	4ba2      	ldr	r3, [pc, #648]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4ba1      	ldr	r3, [pc, #644]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001468:	49a1      	ldr	r1, [pc, #644]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 800146a:	400a      	ands	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	4b9f      	ldr	r3, [pc, #636]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b9e      	ldr	r3, [pc, #632]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001474:	499f      	ldr	r1, [pc, #636]	; (80016f4 <HAL_RCC_OscConfig+0x334>)
 8001476:	400a      	ands	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d014      	beq.n	80014ac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001482:	f7ff fbbd 	bl	8000c00 <HAL_GetTick>
 8001486:	0003      	movs	r3, r0
 8001488:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fbb8 	bl	8000c00 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e298      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800149e:	4b93      	ldr	r3, [pc, #588]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	029b      	lsls	r3, r3, #10
 80014a6:	4013      	ands	r3, r2
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0xcc>
 80014aa:	e015      	b.n	80014d8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fba8 	bl	8000c00 <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b6:	f7ff fba3 	bl	8000c00 <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b64      	cmp	r3, #100	; 0x64
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e283      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c8:	4b88      	ldr	r3, [pc, #544]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	029b      	lsls	r3, r3, #10
 80014d0:	4013      	ands	r3, r2
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0xf6>
 80014d4:	e000      	b.n	80014d8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2202      	movs	r2, #2
 80014de:	4013      	ands	r3, r2
 80014e0:	d100      	bne.n	80014e4 <HAL_RCC_OscConfig+0x124>
 80014e2:	e099      	b.n	8001618 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e4:	4b81      	ldr	r3, [pc, #516]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2238      	movs	r2, #56	; 0x38
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ee:	4b7f      	ldr	r3, [pc, #508]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2203      	movs	r2, #3
 80014f4:	4013      	ands	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	d102      	bne.n	8001504 <HAL_RCC_OscConfig+0x144>
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d002      	beq.n	800150a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d135      	bne.n	8001576 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150a:	4b78      	ldr	r3, [pc, #480]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4013      	ands	r3, r2
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x162>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e256      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b72      	ldr	r3, [pc, #456]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4a74      	ldr	r2, [pc, #464]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001528:	4013      	ands	r3, r2
 800152a:	0019      	movs	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	021a      	lsls	r2, r3, #8
 8001532:	4b6e      	ldr	r3, [pc, #440]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001534:	430a      	orrs	r2, r1
 8001536:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d112      	bne.n	8001564 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800153e:	4b6b      	ldr	r3, [pc, #428]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6e      	ldr	r2, [pc, #440]	; (80016fc <HAL_RCC_OscConfig+0x33c>)
 8001544:	4013      	ands	r3, r2
 8001546:	0019      	movs	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	4b67      	ldr	r3, [pc, #412]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 800154e:	430a      	orrs	r2, r1
 8001550:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001552:	4b66      	ldr	r3, [pc, #408]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0adb      	lsrs	r3, r3, #11
 8001558:	2207      	movs	r2, #7
 800155a:	4013      	ands	r3, r2
 800155c:	4a68      	ldr	r2, [pc, #416]	; (8001700 <HAL_RCC_OscConfig+0x340>)
 800155e:	40da      	lsrs	r2, r3
 8001560:	4b68      	ldr	r3, [pc, #416]	; (8001704 <HAL_RCC_OscConfig+0x344>)
 8001562:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001564:	4b68      	ldr	r3, [pc, #416]	; (8001708 <HAL_RCC_OscConfig+0x348>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff faed 	bl	8000b48 <HAL_InitTick>
 800156e:	1e03      	subs	r3, r0, #0
 8001570:	d051      	beq.n	8001616 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e22c      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d030      	beq.n	80015e0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800157e:	4b5b      	ldr	r3, [pc, #364]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a5e      	ldr	r2, [pc, #376]	; (80016fc <HAL_RCC_OscConfig+0x33c>)
 8001584:	4013      	ands	r3, r2
 8001586:	0019      	movs	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	4b57      	ldr	r3, [pc, #348]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001592:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b55      	ldr	r3, [pc, #340]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	0049      	lsls	r1, r1, #1
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb2e 	bl	8000c00 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fb29 	bl	8000c00 <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e209      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015bc:	4b4b      	ldr	r3, [pc, #300]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4013      	ands	r3, r2
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b48      	ldr	r3, [pc, #288]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a4a      	ldr	r2, [pc, #296]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	021a      	lsls	r2, r3, #8
 80015d8:	4b44      	ldr	r3, [pc, #272]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80015da:	430a      	orrs	r2, r1
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	e01b      	b.n	8001618 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80015e0:	4b42      	ldr	r3, [pc, #264]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b41      	ldr	r3, [pc, #260]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80015e6:	4949      	ldr	r1, [pc, #292]	; (800170c <HAL_RCC_OscConfig+0x34c>)
 80015e8:	400a      	ands	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb08 	bl	8000c00 <HAL_GetTick>
 80015f0:	0003      	movs	r3, r0
 80015f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb03 	bl	8000c00 <HAL_GetTick>
 80015fa:	0002      	movs	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1e3      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001608:	4b38      	ldr	r3, [pc, #224]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4013      	ands	r3, r2
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0x236>
 8001614:	e000      	b.n	8001618 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001616:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2208      	movs	r2, #8
 800161e:	4013      	ands	r3, r2
 8001620:	d047      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001622:	4b32      	ldr	r3, [pc, #200]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2238      	movs	r2, #56	; 0x38
 8001628:	4013      	ands	r3, r2
 800162a:	2b18      	cmp	r3, #24
 800162c:	d10a      	bne.n	8001644 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001632:	2202      	movs	r2, #2
 8001634:	4013      	ands	r3, r2
 8001636:	d03c      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2f2>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d138      	bne.n	80016b2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e1c5      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d019      	beq.n	8001680 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 800164e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001652:	2101      	movs	r1, #1
 8001654:	430a      	orrs	r2, r1
 8001656:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fad2 	bl	8000c00 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001662:	f7ff facd 	bl	8000c00 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e1ad      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001678:	2202      	movs	r2, #2
 800167a:	4013      	ands	r3, r2
 800167c:	d0f1      	beq.n	8001662 <HAL_RCC_OscConfig+0x2a2>
 800167e:	e018      	b.n	80016b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001682:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 8001686:	2101      	movs	r1, #1
 8001688:	438a      	bics	r2, r1
 800168a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fab8 	bl	8000c00 <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001696:	f7ff fab3 	bl	8000c00 <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e193      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80016aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ac:	2202      	movs	r2, #2
 80016ae:	4013      	ands	r3, r2
 80016b0:	d1f1      	bne.n	8001696 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2204      	movs	r2, #4
 80016b8:	4013      	ands	r3, r2
 80016ba:	d100      	bne.n	80016be <HAL_RCC_OscConfig+0x2fe>
 80016bc:	e0c6      	b.n	800184c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016be:	231f      	movs	r3, #31
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2238      	movs	r2, #56	; 0x38
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	d11e      	bne.n	8001710 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_RCC_OscConfig+0x32c>)
 80016d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d6:	2202      	movs	r2, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	d100      	bne.n	80016de <HAL_RCC_OscConfig+0x31e>
 80016dc:	e0b6      	b.n	800184c <HAL_RCC_OscConfig+0x48c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d000      	beq.n	80016e8 <HAL_RCC_OscConfig+0x328>
 80016e6:	e0b1      	b.n	800184c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e171      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
 80016ec:	40021000 	.word	0x40021000
 80016f0:	fffeffff 	.word	0xfffeffff
 80016f4:	fffbffff 	.word	0xfffbffff
 80016f8:	ffff80ff 	.word	0xffff80ff
 80016fc:	ffffc7ff 	.word	0xffffc7ff
 8001700:	00f42400 	.word	0x00f42400
 8001704:	20000000 	.word	0x20000000
 8001708:	20000004 	.word	0x20000004
 800170c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001710:	4bb1      	ldr	r3, [pc, #708]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	055b      	lsls	r3, r3, #21
 8001718:	4013      	ands	r3, r2
 800171a:	d101      	bne.n	8001720 <HAL_RCC_OscConfig+0x360>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x362>
 8001720:	2300      	movs	r3, #0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d011      	beq.n	800174a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	4bac      	ldr	r3, [pc, #688]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800172a:	4bab      	ldr	r3, [pc, #684]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0549      	lsls	r1, r1, #21
 8001730:	430a      	orrs	r2, r1
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c
 8001734:	4ba8      	ldr	r3, [pc, #672]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	055b      	lsls	r3, r3, #21
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001742:	231f      	movs	r3, #31
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174a:	4ba4      	ldr	r3, [pc, #656]	; (80019dc <HAL_RCC_OscConfig+0x61c>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4013      	ands	r3, r2
 8001754:	d11a      	bne.n	800178c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001756:	4ba1      	ldr	r3, [pc, #644]	; (80019dc <HAL_RCC_OscConfig+0x61c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4ba0      	ldr	r3, [pc, #640]	; (80019dc <HAL_RCC_OscConfig+0x61c>)
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	0049      	lsls	r1, r1, #1
 8001760:	430a      	orrs	r2, r1
 8001762:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001764:	f7ff fa4c 	bl	8000c00 <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176e:	f7ff fa47 	bl	8000c00 <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e127      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001780:	4b96      	ldr	r3, [pc, #600]	; (80019dc <HAL_RCC_OscConfig+0x61c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4013      	ands	r3, r2
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x3e2>
 8001794:	4b90      	ldr	r3, [pc, #576]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001796:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001798:	4b8f      	ldr	r3, [pc, #572]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 800179a:	2101      	movs	r1, #1
 800179c:	430a      	orrs	r2, r1
 800179e:	65da      	str	r2, [r3, #92]	; 0x5c
 80017a0:	e01c      	b.n	80017dc <HAL_RCC_OscConfig+0x41c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x404>
 80017aa:	4b8b      	ldr	r3, [pc, #556]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80017ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017ae:	4b8a      	ldr	r3, [pc, #552]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80017b0:	2104      	movs	r1, #4
 80017b2:	430a      	orrs	r2, r1
 80017b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80017b6:	4b88      	ldr	r3, [pc, #544]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80017b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017ba:	4b87      	ldr	r3, [pc, #540]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80017bc:	2101      	movs	r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0x41c>
 80017c4:	4b84      	ldr	r3, [pc, #528]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80017c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017c8:	4b83      	ldr	r3, [pc, #524]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	438a      	bics	r2, r1
 80017ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80017d0:	4b81      	ldr	r3, [pc, #516]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80017d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017d4:	4b80      	ldr	r3, [pc, #512]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80017d6:	2104      	movs	r1, #4
 80017d8:	438a      	bics	r2, r1
 80017da:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d014      	beq.n	800180e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fa0c 	bl	8000c00 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ec:	e009      	b.n	8001802 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff fa07 	bl	8000c00 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	4a79      	ldr	r2, [pc, #484]	; (80019e0 <HAL_RCC_OscConfig+0x620>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e0e6      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001802:	4b75      	ldr	r3, [pc, #468]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	2202      	movs	r2, #2
 8001808:	4013      	ands	r3, r2
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x42e>
 800180c:	e013      	b.n	8001836 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff f9f7 	bl	8000c00 <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001816:	e009      	b.n	800182c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001818:	f7ff f9f2 	bl	8000c00 <HAL_GetTick>
 800181c:	0002      	movs	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	4a6f      	ldr	r2, [pc, #444]	; (80019e0 <HAL_RCC_OscConfig+0x620>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e0d1      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800182c:	4b6a      	ldr	r3, [pc, #424]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 800182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001830:	2202      	movs	r2, #2
 8001832:	4013      	ands	r3, r2
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001836:	231f      	movs	r3, #31
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001840:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001844:	4b64      	ldr	r3, [pc, #400]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001846:	4967      	ldr	r1, [pc, #412]	; (80019e4 <HAL_RCC_OscConfig+0x624>)
 8001848:	400a      	ands	r2, r1
 800184a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d100      	bne.n	8001856 <HAL_RCC_OscConfig+0x496>
 8001854:	e0bb      	b.n	80019ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001856:	4b60      	ldr	r3, [pc, #384]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2238      	movs	r2, #56	; 0x38
 800185c:	4013      	ands	r3, r2
 800185e:	2b10      	cmp	r3, #16
 8001860:	d100      	bne.n	8001864 <HAL_RCC_OscConfig+0x4a4>
 8001862:	e07b      	b.n	800195c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d156      	bne.n	800191a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186c:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001872:	495d      	ldr	r1, [pc, #372]	; (80019e8 <HAL_RCC_OscConfig+0x628>)
 8001874:	400a      	ands	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff f9c2 	bl	8000c00 <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001882:	f7ff f9bd 	bl	8000c00 <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e09d      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001894:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	049b      	lsls	r3, r3, #18
 800189c:	4013      	ands	r3, r2
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a0:	4b4d      	ldr	r3, [pc, #308]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4a51      	ldr	r2, [pc, #324]	; (80019ec <HAL_RCC_OscConfig+0x62c>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1a      	ldr	r2, [r3, #32]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	021b      	lsls	r3, r3, #8
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018cc:	431a      	orrs	r2, r3
 80018ce:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80018d0:	430a      	orrs	r2, r1
 80018d2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d4:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	0449      	lsls	r1, r1, #17
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	0549      	lsls	r1, r1, #21
 80018ec:	430a      	orrs	r2, r1
 80018ee:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff f986 	bl	8000c00 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff f981 	bl	8000c00 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e061      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190c:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	049b      	lsls	r3, r3, #18
 8001914:	4013      	ands	r3, r2
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x53a>
 8001918:	e059      	b.n	80019ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001920:	4931      	ldr	r1, [pc, #196]	; (80019e8 <HAL_RCC_OscConfig+0x628>)
 8001922:	400a      	ands	r2, r1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001926:	f7ff f96b 	bl	8000c00 <HAL_GetTick>
 800192a:	0003      	movs	r3, r0
 800192c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff f966 	bl	8000c00 <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e046      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001942:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	049b      	lsls	r3, r3, #18
 800194a:	4013      	ands	r3, r2
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 8001954:	4926      	ldr	r1, [pc, #152]	; (80019f0 <HAL_RCC_OscConfig+0x630>)
 8001956:	400a      	ands	r2, r1
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	e038      	b.n	80019ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e033      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_RCC_OscConfig+0x618>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2203      	movs	r2, #3
 8001972:	401a      	ands	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	429a      	cmp	r2, r3
 800197a:	d126      	bne.n	80019ca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2270      	movs	r2, #112	; 0x70
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d11f      	bne.n	80019ca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	23fe      	movs	r3, #254	; 0xfe
 800198e:	01db      	lsls	r3, r3, #7
 8001990:	401a      	ands	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d116      	bne.n	80019ca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	23f8      	movs	r3, #248	; 0xf8
 80019a0:	039b      	lsls	r3, r3, #14
 80019a2:	401a      	ands	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d10e      	bne.n	80019ca <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	23e0      	movs	r3, #224	; 0xe0
 80019b0:	051b      	lsls	r3, r3, #20
 80019b2:	401a      	ands	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	0f5b      	lsrs	r3, r3, #29
 80019c0:	075a      	lsls	r2, r3, #29
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b008      	add	sp, #32
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40007000 	.word	0x40007000
 80019e0:	00001388 	.word	0x00001388
 80019e4:	efffffff 	.word	0xefffffff
 80019e8:	feffffff 	.word	0xfeffffff
 80019ec:	11c1808c 	.word	0x11c1808c
 80019f0:	eefefffc 	.word	0xeefefffc

080019f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0e9      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b76      	ldr	r3, [pc, #472]	; (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	4013      	ands	r3, r2
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d91e      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b73      	ldr	r3, [pc, #460]	; (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	4393      	bics	r3, r2
 8001a1e:	0019      	movs	r1, r3
 8001a20:	4b70      	ldr	r3, [pc, #448]	; (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a28:	f7ff f8ea 	bl	8000c00 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a30:	e009      	b.n	8001a46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a32:	f7ff f8e5 	bl	8000c00 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	4a6a      	ldr	r2, [pc, #424]	; (8001be8 <HAL_RCC_ClockConfig+0x1f4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e0ca      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a46:	4b67      	ldr	r3, [pc, #412]	; (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d1ee      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d015      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2204      	movs	r2, #4
 8001a64:	4013      	ands	r3, r2
 8001a66:	d006      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a68:	4b60      	ldr	r3, [pc, #384]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4b5f      	ldr	r3, [pc, #380]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001a6e:	21e0      	movs	r1, #224	; 0xe0
 8001a70:	01c9      	lsls	r1, r1, #7
 8001a72:	430a      	orrs	r2, r1
 8001a74:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	4a5d      	ldr	r2, [pc, #372]	; (8001bf0 <HAL_RCC_ClockConfig+0x1fc>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	0019      	movs	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4b59      	ldr	r3, [pc, #356]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4013      	ands	r3, r2
 8001a92:	d057      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9c:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	029b      	lsls	r3, r3, #10
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d12b      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e097      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab4:	4b4d      	ldr	r3, [pc, #308]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	049b      	lsls	r3, r3, #18
 8001abc:	4013      	ands	r3, r2
 8001abe:	d11f      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e08b      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001acc:	4b47      	ldr	r3, [pc, #284]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d113      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e07f      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d106      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae4:	4b41      	ldr	r3, [pc, #260]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae8:	2202      	movs	r2, #2
 8001aea:	4013      	ands	r3, r2
 8001aec:	d108      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e074      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af2:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af6:	2202      	movs	r2, #2
 8001af8:	4013      	ands	r3, r2
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e06d      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b00:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2207      	movs	r2, #7
 8001b06:	4393      	bics	r3, r2
 8001b08:	0019      	movs	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001b10:	430a      	orrs	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b14:	f7ff f874 	bl	8000c00 <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1c:	e009      	b.n	8001b32 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1e:	f7ff f86f 	bl	8000c00 <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	4a2f      	ldr	r2, [pc, #188]	; (8001be8 <HAL_RCC_ClockConfig+0x1f4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e054      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2238      	movs	r2, #56	; 0x38
 8001b38:	401a      	ands	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d1ec      	bne.n	8001b1e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2207      	movs	r2, #7
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d21e      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2207      	movs	r2, #7
 8001b58:	4393      	bics	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b64:	f7ff f84c 	bl	8000c00 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b6c:	e009      	b.n	8001b82 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6e:	f7ff f847 	bl	8000c00 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <HAL_RCC_ClockConfig+0x1f4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e02c      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2207      	movs	r2, #7
 8001b88:	4013      	ands	r3, r2
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d1ee      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2204      	movs	r2, #4
 8001b96:	4013      	ands	r3, r2
 8001b98:	d009      	beq.n	8001bae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <HAL_RCC_ClockConfig+0x200>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001baa:	430a      	orrs	r2, r1
 8001bac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bae:	f000 f829 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001bb2:	0001      	movs	r1, r0
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	220f      	movs	r2, #15
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_RCC_ClockConfig+0x204>)
 8001bc0:	0092      	lsls	r2, r2, #2
 8001bc2:	58d3      	ldr	r3, [r2, r3]
 8001bc4:	221f      	movs	r2, #31
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	000a      	movs	r2, r1
 8001bca:	40da      	lsrs	r2, r3
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_ClockConfig+0x208>)
 8001bce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_ClockConfig+0x20c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7fe ffb7 	bl	8000b48 <HAL_InitTick>
 8001bda:	0003      	movs	r3, r0
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b004      	add	sp, #16
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40022000 	.word	0x40022000
 8001be8:	00001388 	.word	0x00001388
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	fffff0ff 	.word	0xfffff0ff
 8001bf4:	ffff8fff 	.word	0xffff8fff
 8001bf8:	08002dec 	.word	0x08002dec
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2238      	movs	r2, #56	; 0x38
 8001c10:	4013      	ands	r3, r2
 8001c12:	d10f      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c14:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0adb      	lsrs	r3, r3, #11
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2201      	movs	r2, #1
 8001c20:	409a      	lsls	r2, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c26:	6839      	ldr	r1, [r7, #0]
 8001c28:	4835      	ldr	r0, [pc, #212]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c2a:	f7fe fa6b 	bl	8000104 <__udivsi3>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	e05d      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2238      	movs	r2, #56	; 0x38
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d102      	bne.n	8001c46 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c40:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	e054      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c46:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2238      	movs	r2, #56	; 0x38
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b10      	cmp	r3, #16
 8001c50:	d138      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c52:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2203      	movs	r2, #3
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c5c:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	2207      	movs	r2, #7
 8001c64:	4013      	ands	r3, r2
 8001c66:	3301      	adds	r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d10d      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	4824      	ldr	r0, [pc, #144]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c74:	f7fe fa46 	bl	8000104 <__udivsi3>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	227f      	movs	r2, #127	; 0x7f
 8001c84:	4013      	ands	r3, r2
 8001c86:	434b      	muls	r3, r1
 8001c88:	617b      	str	r3, [r7, #20]
        break;
 8001c8a:	e00d      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	481c      	ldr	r0, [pc, #112]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c90:	f7fe fa38 	bl	8000104 <__udivsi3>
 8001c94:	0003      	movs	r3, r0
 8001c96:	0019      	movs	r1, r3
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	227f      	movs	r2, #127	; 0x7f
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	434b      	muls	r3, r1
 8001ca4:	617b      	str	r3, [r7, #20]
        break;
 8001ca6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0f5b      	lsrs	r3, r3, #29
 8001cae:	2207      	movs	r2, #7
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	6978      	ldr	r0, [r7, #20]
 8001cba:	f7fe fa23 	bl	8000104 <__udivsi3>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	e015      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2238      	movs	r2, #56	; 0x38
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d103      	bne.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2238      	movs	r2, #56	; 0x38
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b18      	cmp	r3, #24
 8001ce2:	d103      	bne.n	8001cec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ce4:	23fa      	movs	r3, #250	; 0xfa
 8001ce6:	01db      	lsls	r3, r3, #7
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	e001      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cf0:	693b      	ldr	r3, [r7, #16]
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b006      	add	sp, #24
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	00f42400 	.word	0x00f42400
 8001d04:	007a1200 	.word	0x007a1200

08001d08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d0c:	4b02      	ldr	r3, [pc, #8]	; (8001d18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	0018      	movs	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	20000000 	.word	0x20000000

08001d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d1c:	b5b0      	push	{r4, r5, r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d20:	f7ff fff2 	bl	8001d08 <HAL_RCC_GetHCLKFreq>
 8001d24:	0004      	movs	r4, r0
 8001d26:	f7ff fb3f 	bl	80013a8 <LL_RCC_GetAPB1Prescaler>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	0b1a      	lsrs	r2, r3, #12
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	58d3      	ldr	r3, [r2, r3]
 8001d34:	221f      	movs	r2, #31
 8001d36:	4013      	ands	r3, r2
 8001d38:	40dc      	lsrs	r4, r3
 8001d3a:	0023      	movs	r3, r4
}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bdb0      	pop	{r4, r5, r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	08002e2c 	.word	0x08002e2c

08001d48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d50:	2313      	movs	r3, #19
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d58:	2312      	movs	r3, #18
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	029b      	lsls	r3, r3, #10
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d100      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d6c:	e0a3      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	2011      	movs	r0, #17
 8001d70:	183b      	adds	r3, r7, r0
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4bc3      	ldr	r3, [pc, #780]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	055b      	lsls	r3, r3, #21
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d110      	bne.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4bc0      	ldr	r3, [pc, #768]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d86:	4bbf      	ldr	r3, [pc, #764]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	0549      	lsls	r1, r1, #21
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d90:	4bbc      	ldr	r3, [pc, #752]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	055b      	lsls	r3, r3, #21
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9e:	183b      	adds	r3, r7, r0
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da4:	4bb8      	ldr	r3, [pc, #736]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4bb7      	ldr	r3, [pc, #732]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001daa:	2180      	movs	r1, #128	; 0x80
 8001dac:	0049      	lsls	r1, r1, #1
 8001dae:	430a      	orrs	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001db2:	f7fe ff25 	bl	8000c00 <HAL_GetTick>
 8001db6:	0003      	movs	r3, r0
 8001db8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbc:	f7fe ff20 	bl	8000c00 <HAL_GetTick>
 8001dc0:	0002      	movs	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d904      	bls.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001dca:	2313      	movs	r3, #19
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	2203      	movs	r2, #3
 8001dd0:	701a      	strb	r2, [r3, #0]
        break;
 8001dd2:	e005      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dd4:	4bac      	ldr	r3, [pc, #688]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d0ed      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001de0:	2313      	movs	r3, #19
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d154      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dea:	4ba6      	ldr	r3, [pc, #664]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dee:	23c0      	movs	r3, #192	; 0xc0
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d019      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d014      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e06:	4b9f      	ldr	r3, [pc, #636]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	4aa0      	ldr	r2, [pc, #640]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e10:	4b9c      	ldr	r3, [pc, #624]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e14:	4b9b      	ldr	r3, [pc, #620]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e16:	2180      	movs	r1, #128	; 0x80
 8001e18:	0249      	lsls	r1, r1, #9
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e1e:	4b99      	ldr	r3, [pc, #612]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e22:	4b98      	ldr	r3, [pc, #608]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e24:	499a      	ldr	r1, [pc, #616]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001e26:	400a      	ands	r2, r1
 8001e28:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e2a:	4b96      	ldr	r3, [pc, #600]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2201      	movs	r2, #1
 8001e34:	4013      	ands	r3, r2
 8001e36:	d016      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7fe fee2 	bl	8000c00 <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e40:	e00c      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7fe fedd 	bl	8000c00 <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	4a91      	ldr	r2, [pc, #580]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d904      	bls.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e52:	2313      	movs	r3, #19
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2203      	movs	r2, #3
 8001e58:	701a      	strb	r2, [r3, #0]
            break;
 8001e5a:	e004      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5c:	4b89      	ldr	r3, [pc, #548]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2202      	movs	r2, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	d0ed      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e66:	2313      	movs	r3, #19
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10a      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e70:	4b84      	ldr	r3, [pc, #528]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	4a85      	ldr	r2, [pc, #532]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	0019      	movs	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7e:	4b81      	ldr	r3, [pc, #516]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e84:	e00c      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e86:	2312      	movs	r3, #18
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	2213      	movs	r2, #19
 8001e8c:	18ba      	adds	r2, r7, r2
 8001e8e:	7812      	ldrb	r2, [r2, #0]
 8001e90:	701a      	strb	r2, [r3, #0]
 8001e92:	e005      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e94:	2312      	movs	r3, #18
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	2213      	movs	r2, #19
 8001e9a:	18ba      	adds	r2, r7, r2
 8001e9c:	7812      	ldrb	r2, [r2, #0]
 8001e9e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ea0:	2311      	movs	r3, #17
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d105      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eaa:	4b76      	ldr	r3, [pc, #472]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eae:	4b75      	ldr	r3, [pc, #468]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eb0:	4979      	ldr	r1, [pc, #484]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d009      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ec0:	4b70      	ldr	r3, [pc, #448]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	4393      	bics	r3, r2
 8001ec8:	0019      	movs	r1, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	4b6d      	ldr	r3, [pc, #436]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ede:	4b69      	ldr	r3, [pc, #420]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	4393      	bics	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	4b65      	ldr	r3, [pc, #404]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d009      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001efc:	4b61      	ldr	r3, [pc, #388]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f00:	4a66      	ldr	r2, [pc, #408]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	4b5e      	ldr	r3, [pc, #376]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d009      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f1c:	4b59      	ldr	r3, [pc, #356]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	4a5f      	ldr	r2, [pc, #380]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699a      	ldr	r2, [r3, #24]
 8001f2a:	4b56      	ldr	r3, [pc, #344]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f3c:	4b51      	ldr	r3, [pc, #324]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	4a58      	ldr	r2, [pc, #352]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	4b4e      	ldr	r3, [pc, #312]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2220      	movs	r2, #32
 8001f56:	4013      	ands	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f5a:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	4b46      	ldr	r3, [pc, #280]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	01db      	lsls	r3, r3, #7
 8001f76:	4013      	ands	r3, r2
 8001f78:	d015      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f7a:	4b42      	ldr	r3, [pc, #264]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	0899      	lsrs	r1, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1a      	ldr	r2, [r3, #32]
 8001f86:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	05db      	lsls	r3, r3, #23
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f98:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	4b39      	ldr	r3, [pc, #228]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	0249      	lsls	r1, r1, #9
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	031b      	lsls	r3, r3, #12
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fb2:	4b34      	ldr	r3, [pc, #208]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	4393      	bics	r3, r2
 8001fba:	0019      	movs	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fc0:	4b30      	ldr	r3, [pc, #192]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	039b      	lsls	r3, r3, #14
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d016      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	4a35      	ldr	r2, [pc, #212]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe0:	4b28      	ldr	r3, [pc, #160]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	03db      	lsls	r3, r3, #15
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d106      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	0449      	lsls	r1, r1, #17
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	03db      	lsls	r3, r3, #15
 8002008:	4013      	ands	r3, r2
 800200a:	d016      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002012:	4013      	ands	r3, r2
 8002014:	0019      	movs	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800201c:	430a      	orrs	r2, r1
 800201e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	045b      	lsls	r3, r3, #17
 8002028:	429a      	cmp	r2, r3
 800202a:	d106      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	0449      	lsls	r1, r1, #17
 8002036:	430a      	orrs	r2, r1
 8002038:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4013      	ands	r3, r2
 8002044:	d016      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	4a1a      	ldr	r2, [pc, #104]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800204c:	4013      	ands	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002056:	430a      	orrs	r2, r1
 8002058:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	01db      	lsls	r3, r3, #7
 8002062:	429a      	cmp	r2, r3
 8002064:	d106      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002066:	4b07      	ldr	r3, [pc, #28]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	0249      	lsls	r1, r1, #9
 8002070:	430a      	orrs	r2, r1
 8002072:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002074:	2312      	movs	r3, #18
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	781b      	ldrb	r3, [r3, #0]
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b006      	add	sp, #24
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	40021000 	.word	0x40021000
 8002088:	40007000 	.word	0x40007000
 800208c:	fffffcff 	.word	0xfffffcff
 8002090:	fffeffff 	.word	0xfffeffff
 8002094:	00001388 	.word	0x00001388
 8002098:	efffffff 	.word	0xefffffff
 800209c:	fffff3ff 	.word	0xfffff3ff
 80020a0:	fff3ffff 	.word	0xfff3ffff
 80020a4:	ffcfffff 	.word	0xffcfffff
 80020a8:	ffffcfff 	.word	0xffffcfff
 80020ac:	ffbfffff 	.word	0xffbfffff
 80020b0:	feffffff 	.word	0xfeffffff
 80020b4:	ffff3fff 	.word	0xffff3fff

080020b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e046      	b.n	8002158 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2288      	movs	r2, #136	; 0x88
 80020ce:	589b      	ldr	r3, [r3, r2]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d107      	bne.n	80020e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2284      	movs	r2, #132	; 0x84
 80020d8:	2100      	movs	r1, #0
 80020da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	0018      	movs	r0, r3
 80020e0:	f7fe fc6c 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2288      	movs	r2, #136	; 0x88
 80020e8:	2124      	movs	r1, #36	; 0x24
 80020ea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2101      	movs	r1, #1
 80020f8:	438a      	bics	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	0018      	movs	r0, r3
 8002108:	f000 faea 	bl	80026e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	0018      	movs	r0, r3
 8002110:	f000 f828 	bl	8002164 <UART_SetConfig>
 8002114:	0003      	movs	r3, r0
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e01c      	b.n	8002158 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	490d      	ldr	r1, [pc, #52]	; (8002160 <HAL_UART_Init+0xa8>)
 800212a:	400a      	ands	r2, r1
 800212c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	212a      	movs	r1, #42	; 0x2a
 800213a:	438a      	bics	r2, r1
 800213c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	0018      	movs	r0, r3
 8002152:	f000 fb79 	bl	8002848 <UART_CheckIdleState>
 8002156:	0003      	movs	r3, r0
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b002      	add	sp, #8
 800215e:	bd80      	pop	{r7, pc}
 8002160:	ffffb7ff 	.word	0xffffb7ff

08002164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002164:	b5b0      	push	{r4, r5, r7, lr}
 8002166:	b090      	sub	sp, #64	; 0x40
 8002168:	af00      	add	r7, sp, #0
 800216a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800216c:	231a      	movs	r3, #26
 800216e:	2220      	movs	r2, #32
 8002170:	189b      	adds	r3, r3, r2
 8002172:	19db      	adds	r3, r3, r7
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	431a      	orrs	r2, r3
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	431a      	orrs	r2, r3
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	4313      	orrs	r3, r2
 800218e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4aaf      	ldr	r2, [pc, #700]	; (8002454 <UART_SetConfig+0x2f0>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a2:	430b      	orrs	r3, r1
 80021a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4aaa      	ldr	r2, [pc, #680]	; (8002458 <UART_SetConfig+0x2f4>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0018      	movs	r0, r3
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	68d9      	ldr	r1, [r3, #12]
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	0003      	movs	r3, r0
 80021bc:	430b      	orrs	r3, r1
 80021be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4aa4      	ldr	r2, [pc, #656]	; (800245c <UART_SetConfig+0x2f8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d004      	beq.n	80021da <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021d6:	4313      	orrs	r3, r2
 80021d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4a9f      	ldr	r2, [pc, #636]	; (8002460 <UART_SetConfig+0x2fc>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ec:	430b      	orrs	r3, r1
 80021ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	220f      	movs	r2, #15
 80021f8:	4393      	bics	r3, r2
 80021fa:	0018      	movs	r0, r3
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	0003      	movs	r3, r0
 8002206:	430b      	orrs	r3, r1
 8002208:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a95      	ldr	r2, [pc, #596]	; (8002464 <UART_SetConfig+0x300>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d131      	bne.n	8002278 <UART_SetConfig+0x114>
 8002214:	4b94      	ldr	r3, [pc, #592]	; (8002468 <UART_SetConfig+0x304>)
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	2203      	movs	r2, #3
 800221a:	4013      	ands	r3, r2
 800221c:	2b03      	cmp	r3, #3
 800221e:	d01d      	beq.n	800225c <UART_SetConfig+0xf8>
 8002220:	d823      	bhi.n	800226a <UART_SetConfig+0x106>
 8002222:	2b02      	cmp	r3, #2
 8002224:	d00c      	beq.n	8002240 <UART_SetConfig+0xdc>
 8002226:	d820      	bhi.n	800226a <UART_SetConfig+0x106>
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <UART_SetConfig+0xce>
 800222c:	2b01      	cmp	r3, #1
 800222e:	d00e      	beq.n	800224e <UART_SetConfig+0xea>
 8002230:	e01b      	b.n	800226a <UART_SetConfig+0x106>
 8002232:	231b      	movs	r3, #27
 8002234:	2220      	movs	r2, #32
 8002236:	189b      	adds	r3, r3, r2
 8002238:	19db      	adds	r3, r3, r7
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	e0b4      	b.n	80023aa <UART_SetConfig+0x246>
 8002240:	231b      	movs	r3, #27
 8002242:	2220      	movs	r2, #32
 8002244:	189b      	adds	r3, r3, r2
 8002246:	19db      	adds	r3, r3, r7
 8002248:	2202      	movs	r2, #2
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e0ad      	b.n	80023aa <UART_SetConfig+0x246>
 800224e:	231b      	movs	r3, #27
 8002250:	2220      	movs	r2, #32
 8002252:	189b      	adds	r3, r3, r2
 8002254:	19db      	adds	r3, r3, r7
 8002256:	2204      	movs	r2, #4
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e0a6      	b.n	80023aa <UART_SetConfig+0x246>
 800225c:	231b      	movs	r3, #27
 800225e:	2220      	movs	r2, #32
 8002260:	189b      	adds	r3, r3, r2
 8002262:	19db      	adds	r3, r3, r7
 8002264:	2208      	movs	r2, #8
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e09f      	b.n	80023aa <UART_SetConfig+0x246>
 800226a:	231b      	movs	r3, #27
 800226c:	2220      	movs	r2, #32
 800226e:	189b      	adds	r3, r3, r2
 8002270:	19db      	adds	r3, r3, r7
 8002272:	2210      	movs	r2, #16
 8002274:	701a      	strb	r2, [r3, #0]
 8002276:	e098      	b.n	80023aa <UART_SetConfig+0x246>
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a7b      	ldr	r2, [pc, #492]	; (800246c <UART_SetConfig+0x308>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d131      	bne.n	80022e6 <UART_SetConfig+0x182>
 8002282:	4b79      	ldr	r3, [pc, #484]	; (8002468 <UART_SetConfig+0x304>)
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	220c      	movs	r2, #12
 8002288:	4013      	ands	r3, r2
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d01d      	beq.n	80022ca <UART_SetConfig+0x166>
 800228e:	d823      	bhi.n	80022d8 <UART_SetConfig+0x174>
 8002290:	2b08      	cmp	r3, #8
 8002292:	d00c      	beq.n	80022ae <UART_SetConfig+0x14a>
 8002294:	d820      	bhi.n	80022d8 <UART_SetConfig+0x174>
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <UART_SetConfig+0x13c>
 800229a:	2b04      	cmp	r3, #4
 800229c:	d00e      	beq.n	80022bc <UART_SetConfig+0x158>
 800229e:	e01b      	b.n	80022d8 <UART_SetConfig+0x174>
 80022a0:	231b      	movs	r3, #27
 80022a2:	2220      	movs	r2, #32
 80022a4:	189b      	adds	r3, r3, r2
 80022a6:	19db      	adds	r3, r3, r7
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e07d      	b.n	80023aa <UART_SetConfig+0x246>
 80022ae:	231b      	movs	r3, #27
 80022b0:	2220      	movs	r2, #32
 80022b2:	189b      	adds	r3, r3, r2
 80022b4:	19db      	adds	r3, r3, r7
 80022b6:	2202      	movs	r2, #2
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e076      	b.n	80023aa <UART_SetConfig+0x246>
 80022bc:	231b      	movs	r3, #27
 80022be:	2220      	movs	r2, #32
 80022c0:	189b      	adds	r3, r3, r2
 80022c2:	19db      	adds	r3, r3, r7
 80022c4:	2204      	movs	r2, #4
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e06f      	b.n	80023aa <UART_SetConfig+0x246>
 80022ca:	231b      	movs	r3, #27
 80022cc:	2220      	movs	r2, #32
 80022ce:	189b      	adds	r3, r3, r2
 80022d0:	19db      	adds	r3, r3, r7
 80022d2:	2208      	movs	r2, #8
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	e068      	b.n	80023aa <UART_SetConfig+0x246>
 80022d8:	231b      	movs	r3, #27
 80022da:	2220      	movs	r2, #32
 80022dc:	189b      	adds	r3, r3, r2
 80022de:	19db      	adds	r3, r3, r7
 80022e0:	2210      	movs	r2, #16
 80022e2:	701a      	strb	r2, [r3, #0]
 80022e4:	e061      	b.n	80023aa <UART_SetConfig+0x246>
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a61      	ldr	r2, [pc, #388]	; (8002470 <UART_SetConfig+0x30c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d106      	bne.n	80022fe <UART_SetConfig+0x19a>
 80022f0:	231b      	movs	r3, #27
 80022f2:	2220      	movs	r2, #32
 80022f4:	189b      	adds	r3, r3, r2
 80022f6:	19db      	adds	r3, r3, r7
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
 80022fc:	e055      	b.n	80023aa <UART_SetConfig+0x246>
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a5c      	ldr	r2, [pc, #368]	; (8002474 <UART_SetConfig+0x310>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d106      	bne.n	8002316 <UART_SetConfig+0x1b2>
 8002308:	231b      	movs	r3, #27
 800230a:	2220      	movs	r2, #32
 800230c:	189b      	adds	r3, r3, r2
 800230e:	19db      	adds	r3, r3, r7
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e049      	b.n	80023aa <UART_SetConfig+0x246>
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a50      	ldr	r2, [pc, #320]	; (800245c <UART_SetConfig+0x2f8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d13e      	bne.n	800239e <UART_SetConfig+0x23a>
 8002320:	4b51      	ldr	r3, [pc, #324]	; (8002468 <UART_SetConfig+0x304>)
 8002322:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002324:	23c0      	movs	r3, #192	; 0xc0
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	4013      	ands	r3, r2
 800232a:	22c0      	movs	r2, #192	; 0xc0
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	4293      	cmp	r3, r2
 8002330:	d027      	beq.n	8002382 <UART_SetConfig+0x21e>
 8002332:	22c0      	movs	r2, #192	; 0xc0
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	4293      	cmp	r3, r2
 8002338:	d82a      	bhi.n	8002390 <UART_SetConfig+0x22c>
 800233a:	2280      	movs	r2, #128	; 0x80
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	4293      	cmp	r3, r2
 8002340:	d011      	beq.n	8002366 <UART_SetConfig+0x202>
 8002342:	2280      	movs	r2, #128	; 0x80
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	4293      	cmp	r3, r2
 8002348:	d822      	bhi.n	8002390 <UART_SetConfig+0x22c>
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <UART_SetConfig+0x1f4>
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	00d2      	lsls	r2, r2, #3
 8002352:	4293      	cmp	r3, r2
 8002354:	d00e      	beq.n	8002374 <UART_SetConfig+0x210>
 8002356:	e01b      	b.n	8002390 <UART_SetConfig+0x22c>
 8002358:	231b      	movs	r3, #27
 800235a:	2220      	movs	r2, #32
 800235c:	189b      	adds	r3, r3, r2
 800235e:	19db      	adds	r3, r3, r7
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
 8002364:	e021      	b.n	80023aa <UART_SetConfig+0x246>
 8002366:	231b      	movs	r3, #27
 8002368:	2220      	movs	r2, #32
 800236a:	189b      	adds	r3, r3, r2
 800236c:	19db      	adds	r3, r3, r7
 800236e:	2202      	movs	r2, #2
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e01a      	b.n	80023aa <UART_SetConfig+0x246>
 8002374:	231b      	movs	r3, #27
 8002376:	2220      	movs	r2, #32
 8002378:	189b      	adds	r3, r3, r2
 800237a:	19db      	adds	r3, r3, r7
 800237c:	2204      	movs	r2, #4
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e013      	b.n	80023aa <UART_SetConfig+0x246>
 8002382:	231b      	movs	r3, #27
 8002384:	2220      	movs	r2, #32
 8002386:	189b      	adds	r3, r3, r2
 8002388:	19db      	adds	r3, r3, r7
 800238a:	2208      	movs	r2, #8
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	e00c      	b.n	80023aa <UART_SetConfig+0x246>
 8002390:	231b      	movs	r3, #27
 8002392:	2220      	movs	r2, #32
 8002394:	189b      	adds	r3, r3, r2
 8002396:	19db      	adds	r3, r3, r7
 8002398:	2210      	movs	r2, #16
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	e005      	b.n	80023aa <UART_SetConfig+0x246>
 800239e:	231b      	movs	r3, #27
 80023a0:	2220      	movs	r2, #32
 80023a2:	189b      	adds	r3, r3, r2
 80023a4:	19db      	adds	r3, r3, r7
 80023a6:	2210      	movs	r2, #16
 80023a8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a2b      	ldr	r2, [pc, #172]	; (800245c <UART_SetConfig+0x2f8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d000      	beq.n	80023b6 <UART_SetConfig+0x252>
 80023b4:	e0a9      	b.n	800250a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80023b6:	231b      	movs	r3, #27
 80023b8:	2220      	movs	r2, #32
 80023ba:	189b      	adds	r3, r3, r2
 80023bc:	19db      	adds	r3, r3, r7
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d015      	beq.n	80023f0 <UART_SetConfig+0x28c>
 80023c4:	dc18      	bgt.n	80023f8 <UART_SetConfig+0x294>
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d00d      	beq.n	80023e6 <UART_SetConfig+0x282>
 80023ca:	dc15      	bgt.n	80023f8 <UART_SetConfig+0x294>
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <UART_SetConfig+0x272>
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d005      	beq.n	80023e0 <UART_SetConfig+0x27c>
 80023d4:	e010      	b.n	80023f8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023d6:	f7ff fca1 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 80023da:	0003      	movs	r3, r0
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023de:	e014      	b.n	800240a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023e0:	4b25      	ldr	r3, [pc, #148]	; (8002478 <UART_SetConfig+0x314>)
 80023e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023e4:	e011      	b.n	800240a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023e6:	f7ff fc0d 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 80023ea:	0003      	movs	r3, r0
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023ee:	e00c      	b.n	800240a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023f6:	e008      	b.n	800240a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80023fc:	231a      	movs	r3, #26
 80023fe:	2220      	movs	r2, #32
 8002400:	189b      	adds	r3, r3, r2
 8002402:	19db      	adds	r3, r3, r7
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
        break;
 8002408:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800240a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240c:	2b00      	cmp	r3, #0
 800240e:	d100      	bne.n	8002412 <UART_SetConfig+0x2ae>
 8002410:	e14b      	b.n	80026aa <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002416:	4b19      	ldr	r3, [pc, #100]	; (800247c <UART_SetConfig+0x318>)
 8002418:	0052      	lsls	r2, r2, #1
 800241a:	5ad3      	ldrh	r3, [r2, r3]
 800241c:	0019      	movs	r1, r3
 800241e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002420:	f7fd fe70 	bl	8000104 <__udivsi3>
 8002424:	0003      	movs	r3, r0
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	0013      	movs	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	189b      	adds	r3, r3, r2
 8002432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002434:	429a      	cmp	r2, r3
 8002436:	d305      	bcc.n	8002444 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800243e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002440:	429a      	cmp	r2, r3
 8002442:	d91d      	bls.n	8002480 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002444:	231a      	movs	r3, #26
 8002446:	2220      	movs	r2, #32
 8002448:	189b      	adds	r3, r3, r2
 800244a:	19db      	adds	r3, r3, r7
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	e12b      	b.n	80026aa <UART_SetConfig+0x546>
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	cfff69f3 	.word	0xcfff69f3
 8002458:	ffffcfff 	.word	0xffffcfff
 800245c:	40008000 	.word	0x40008000
 8002460:	11fff4ff 	.word	0x11fff4ff
 8002464:	40013800 	.word	0x40013800
 8002468:	40021000 	.word	0x40021000
 800246c:	40004400 	.word	0x40004400
 8002470:	40004800 	.word	0x40004800
 8002474:	40004c00 	.word	0x40004c00
 8002478:	00f42400 	.word	0x00f42400
 800247c:	08002e4c 	.word	0x08002e4c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	2300      	movs	r3, #0
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800248c:	4b92      	ldr	r3, [pc, #584]	; (80026d8 <UART_SetConfig+0x574>)
 800248e:	0052      	lsls	r2, r2, #1
 8002490:	5ad3      	ldrh	r3, [r2, r3]
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	69b8      	ldr	r0, [r7, #24]
 800249e:	69f9      	ldr	r1, [r7, #28]
 80024a0:	f7fd ffa6 	bl	80003f0 <__aeabi_uldivmod>
 80024a4:	0002      	movs	r2, r0
 80024a6:	000b      	movs	r3, r1
 80024a8:	0e11      	lsrs	r1, r2, #24
 80024aa:	021d      	lsls	r5, r3, #8
 80024ac:	430d      	orrs	r5, r1
 80024ae:	0214      	lsls	r4, r2, #8
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68b8      	ldr	r0, [r7, #8]
 80024be:	68f9      	ldr	r1, [r7, #12]
 80024c0:	1900      	adds	r0, r0, r4
 80024c2:	4169      	adcs	r1, r5
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f7fd ff8d 	bl	80003f0 <__aeabi_uldivmod>
 80024d6:	0002      	movs	r2, r0
 80024d8:	000b      	movs	r3, r1
 80024da:	0013      	movs	r3, r2
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80024de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e0:	23c0      	movs	r3, #192	; 0xc0
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d309      	bcc.n	80024fc <UART_SetConfig+0x398>
 80024e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	035b      	lsls	r3, r3, #13
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d204      	bcs.n	80024fc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	e0d6      	b.n	80026aa <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80024fc:	231a      	movs	r3, #26
 80024fe:	2220      	movs	r2, #32
 8002500:	189b      	adds	r3, r3, r2
 8002502:	19db      	adds	r3, r3, r7
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e0cf      	b.n	80026aa <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	429a      	cmp	r2, r3
 8002514:	d000      	beq.n	8002518 <UART_SetConfig+0x3b4>
 8002516:	e070      	b.n	80025fa <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002518:	231b      	movs	r3, #27
 800251a:	2220      	movs	r2, #32
 800251c:	189b      	adds	r3, r3, r2
 800251e:	19db      	adds	r3, r3, r7
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b08      	cmp	r3, #8
 8002524:	d015      	beq.n	8002552 <UART_SetConfig+0x3ee>
 8002526:	dc18      	bgt.n	800255a <UART_SetConfig+0x3f6>
 8002528:	2b04      	cmp	r3, #4
 800252a:	d00d      	beq.n	8002548 <UART_SetConfig+0x3e4>
 800252c:	dc15      	bgt.n	800255a <UART_SetConfig+0x3f6>
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <UART_SetConfig+0x3d4>
 8002532:	2b02      	cmp	r3, #2
 8002534:	d005      	beq.n	8002542 <UART_SetConfig+0x3de>
 8002536:	e010      	b.n	800255a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002538:	f7ff fbf0 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 800253c:	0003      	movs	r3, r0
 800253e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002540:	e014      	b.n	800256c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002542:	4b66      	ldr	r3, [pc, #408]	; (80026dc <UART_SetConfig+0x578>)
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002546:	e011      	b.n	800256c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002548:	f7ff fb5c 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 800254c:	0003      	movs	r3, r0
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002550:	e00c      	b.n	800256c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002558:	e008      	b.n	800256c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800255e:	231a      	movs	r3, #26
 8002560:	2220      	movs	r2, #32
 8002562:	189b      	adds	r3, r3, r2
 8002564:	19db      	adds	r3, r3, r7
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
        break;
 800256a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800256c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256e:	2b00      	cmp	r3, #0
 8002570:	d100      	bne.n	8002574 <UART_SetConfig+0x410>
 8002572:	e09a      	b.n	80026aa <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002578:	4b57      	ldr	r3, [pc, #348]	; (80026d8 <UART_SetConfig+0x574>)
 800257a:	0052      	lsls	r2, r2, #1
 800257c:	5ad3      	ldrh	r3, [r2, r3]
 800257e:	0019      	movs	r1, r3
 8002580:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002582:	f7fd fdbf 	bl	8000104 <__udivsi3>
 8002586:	0003      	movs	r3, r0
 8002588:	005a      	lsls	r2, r3, #1
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	18d2      	adds	r2, r2, r3
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	0019      	movs	r1, r3
 8002598:	0010      	movs	r0, r2
 800259a:	f7fd fdb3 	bl	8000104 <__udivsi3>
 800259e:	0003      	movs	r3, r0
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	2b0f      	cmp	r3, #15
 80025a6:	d921      	bls.n	80025ec <UART_SetConfig+0x488>
 80025a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	025b      	lsls	r3, r3, #9
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d21c      	bcs.n	80025ec <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	200e      	movs	r0, #14
 80025b8:	2420      	movs	r4, #32
 80025ba:	1903      	adds	r3, r0, r4
 80025bc:	19db      	adds	r3, r3, r7
 80025be:	210f      	movs	r1, #15
 80025c0:	438a      	bics	r2, r1
 80025c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	085b      	lsrs	r3, r3, #1
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2207      	movs	r2, #7
 80025cc:	4013      	ands	r3, r2
 80025ce:	b299      	uxth	r1, r3
 80025d0:	1903      	adds	r3, r0, r4
 80025d2:	19db      	adds	r3, r3, r7
 80025d4:	1902      	adds	r2, r0, r4
 80025d6:	19d2      	adds	r2, r2, r7
 80025d8:	8812      	ldrh	r2, [r2, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	1902      	adds	r2, r0, r4
 80025e4:	19d2      	adds	r2, r2, r7
 80025e6:	8812      	ldrh	r2, [r2, #0]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	e05e      	b.n	80026aa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80025ec:	231a      	movs	r3, #26
 80025ee:	2220      	movs	r2, #32
 80025f0:	189b      	adds	r3, r3, r2
 80025f2:	19db      	adds	r3, r3, r7
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	e057      	b.n	80026aa <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025fa:	231b      	movs	r3, #27
 80025fc:	2220      	movs	r2, #32
 80025fe:	189b      	adds	r3, r3, r2
 8002600:	19db      	adds	r3, r3, r7
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b08      	cmp	r3, #8
 8002606:	d015      	beq.n	8002634 <UART_SetConfig+0x4d0>
 8002608:	dc18      	bgt.n	800263c <UART_SetConfig+0x4d8>
 800260a:	2b04      	cmp	r3, #4
 800260c:	d00d      	beq.n	800262a <UART_SetConfig+0x4c6>
 800260e:	dc15      	bgt.n	800263c <UART_SetConfig+0x4d8>
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <UART_SetConfig+0x4b6>
 8002614:	2b02      	cmp	r3, #2
 8002616:	d005      	beq.n	8002624 <UART_SetConfig+0x4c0>
 8002618:	e010      	b.n	800263c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800261a:	f7ff fb7f 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 800261e:	0003      	movs	r3, r0
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002622:	e014      	b.n	800264e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002624:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <UART_SetConfig+0x578>)
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002628:	e011      	b.n	800264e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800262a:	f7ff faeb 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 800262e:	0003      	movs	r3, r0
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002632:	e00c      	b.n	800264e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800263a:	e008      	b.n	800264e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002640:	231a      	movs	r3, #26
 8002642:	2220      	movs	r2, #32
 8002644:	189b      	adds	r3, r3, r2
 8002646:	19db      	adds	r3, r3, r7
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
        break;
 800264c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800264e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002650:	2b00      	cmp	r3, #0
 8002652:	d02a      	beq.n	80026aa <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002658:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <UART_SetConfig+0x574>)
 800265a:	0052      	lsls	r2, r2, #1
 800265c:	5ad3      	ldrh	r3, [r2, r3]
 800265e:	0019      	movs	r1, r3
 8002660:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002662:	f7fd fd4f 	bl	8000104 <__udivsi3>
 8002666:	0003      	movs	r3, r0
 8002668:	001a      	movs	r2, r3
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	18d2      	adds	r2, r2, r3
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	0019      	movs	r1, r3
 8002678:	0010      	movs	r0, r2
 800267a:	f7fd fd43 	bl	8000104 <__udivsi3>
 800267e:	0003      	movs	r3, r0
 8002680:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d90a      	bls.n	800269e <UART_SetConfig+0x53a>
 8002688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	025b      	lsls	r3, r3, #9
 800268e:	429a      	cmp	r2, r3
 8002690:	d205      	bcs.n	800269e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	b29a      	uxth	r2, r3
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60da      	str	r2, [r3, #12]
 800269c:	e005      	b.n	80026aa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800269e:	231a      	movs	r3, #26
 80026a0:	2220      	movs	r2, #32
 80026a2:	189b      	adds	r3, r3, r2
 80026a4:	19db      	adds	r3, r3, r7
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	226a      	movs	r2, #106	; 0x6a
 80026ae:	2101      	movs	r1, #1
 80026b0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	2268      	movs	r2, #104	; 0x68
 80026b6:	2101      	movs	r1, #1
 80026b8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	2200      	movs	r2, #0
 80026be:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	2200      	movs	r2, #0
 80026c4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80026c6:	231a      	movs	r3, #26
 80026c8:	2220      	movs	r2, #32
 80026ca:	189b      	adds	r3, r3, r2
 80026cc:	19db      	adds	r3, r3, r7
 80026ce:	781b      	ldrb	r3, [r3, #0]
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b010      	add	sp, #64	; 0x40
 80026d6:	bdb0      	pop	{r4, r5, r7, pc}
 80026d8:	08002e4c 	.word	0x08002e4c
 80026dc:	00f42400 	.word	0x00f42400

080026e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	2208      	movs	r2, #8
 80026ee:	4013      	ands	r3, r2
 80026f0:	d00b      	beq.n	800270a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a4a      	ldr	r2, [pc, #296]	; (8002824 <UART_AdvFeatureConfig+0x144>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	2201      	movs	r2, #1
 8002710:	4013      	ands	r3, r2
 8002712:	d00b      	beq.n	800272c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a43      	ldr	r2, [pc, #268]	; (8002828 <UART_AdvFeatureConfig+0x148>)
 800271c:	4013      	ands	r3, r2
 800271e:	0019      	movs	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	2202      	movs	r2, #2
 8002732:	4013      	ands	r3, r2
 8002734:	d00b      	beq.n	800274e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a3b      	ldr	r2, [pc, #236]	; (800282c <UART_AdvFeatureConfig+0x14c>)
 800273e:	4013      	ands	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	2204      	movs	r2, #4
 8002754:	4013      	ands	r3, r2
 8002756:	d00b      	beq.n	8002770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a34      	ldr	r2, [pc, #208]	; (8002830 <UART_AdvFeatureConfig+0x150>)
 8002760:	4013      	ands	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	2210      	movs	r2, #16
 8002776:	4013      	ands	r3, r2
 8002778:	d00b      	beq.n	8002792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a2c      	ldr	r2, [pc, #176]	; (8002834 <UART_AdvFeatureConfig+0x154>)
 8002782:	4013      	ands	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	2220      	movs	r2, #32
 8002798:	4013      	ands	r3, r2
 800279a:	d00b      	beq.n	80027b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4a25      	ldr	r2, [pc, #148]	; (8002838 <UART_AdvFeatureConfig+0x158>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	2240      	movs	r2, #64	; 0x40
 80027ba:	4013      	ands	r3, r2
 80027bc:	d01d      	beq.n	80027fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a1d      	ldr	r2, [pc, #116]	; (800283c <UART_AdvFeatureConfig+0x15c>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	035b      	lsls	r3, r3, #13
 80027de:	429a      	cmp	r2, r3
 80027e0:	d10b      	bne.n	80027fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a15      	ldr	r2, [pc, #84]	; (8002840 <UART_AdvFeatureConfig+0x160>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	0019      	movs	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	2280      	movs	r2, #128	; 0x80
 8002800:	4013      	ands	r3, r2
 8002802:	d00b      	beq.n	800281c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <UART_AdvFeatureConfig+0x164>)
 800280c:	4013      	ands	r3, r2
 800280e:	0019      	movs	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	605a      	str	r2, [r3, #4]
  }
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b002      	add	sp, #8
 8002822:	bd80      	pop	{r7, pc}
 8002824:	ffff7fff 	.word	0xffff7fff
 8002828:	fffdffff 	.word	0xfffdffff
 800282c:	fffeffff 	.word	0xfffeffff
 8002830:	fffbffff 	.word	0xfffbffff
 8002834:	ffffefff 	.word	0xffffefff
 8002838:	ffffdfff 	.word	0xffffdfff
 800283c:	ffefffff 	.word	0xffefffff
 8002840:	ff9fffff 	.word	0xff9fffff
 8002844:	fff7ffff 	.word	0xfff7ffff

08002848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b092      	sub	sp, #72	; 0x48
 800284c:	af02      	add	r7, sp, #8
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2290      	movs	r2, #144	; 0x90
 8002854:	2100      	movs	r1, #0
 8002856:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002858:	f7fe f9d2 	bl	8000c00 <HAL_GetTick>
 800285c:	0003      	movs	r3, r0
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2208      	movs	r2, #8
 8002868:	4013      	ands	r3, r2
 800286a:	2b08      	cmp	r3, #8
 800286c:	d12d      	bne.n	80028ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800286e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	0391      	lsls	r1, r2, #14
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4a47      	ldr	r2, [pc, #284]	; (8002994 <UART_CheckIdleState+0x14c>)
 8002878:	9200      	str	r2, [sp, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	f000 f88e 	bl	800299c <UART_WaitOnFlagUntilTimeout>
 8002880:	1e03      	subs	r3, r0, #0
 8002882:	d022      	beq.n	80028ca <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002884:	f3ef 8310 	mrs	r3, PRIMASK
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
 800288e:	2301      	movs	r3, #1
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	f383 8810 	msr	PRIMASK, r3
}
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	438a      	bics	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	f383 8810 	msr	PRIMASK, r3
}
 80028b4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2288      	movs	r2, #136	; 0x88
 80028ba:	2120      	movs	r1, #32
 80028bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2284      	movs	r2, #132	; 0x84
 80028c2:	2100      	movs	r1, #0
 80028c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e060      	b.n	800298c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2204      	movs	r2, #4
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d146      	bne.n	8002966 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	03d1      	lsls	r1, r2, #15
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4a2c      	ldr	r2, [pc, #176]	; (8002994 <UART_CheckIdleState+0x14c>)
 80028e2:	9200      	str	r2, [sp, #0]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f000 f859 	bl	800299c <UART_WaitOnFlagUntilTimeout>
 80028ea:	1e03      	subs	r3, r0, #0
 80028ec:	d03b      	beq.n	8002966 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ee:	f3ef 8310 	mrs	r3, PRIMASK
 80028f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80028f4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
 80028f8:	2301      	movs	r3, #1
 80028fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f383 8810 	msr	PRIMASK, r3
}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4922      	ldr	r1, [pc, #136]	; (8002998 <UART_CheckIdleState+0x150>)
 8002910:	400a      	ands	r2, r1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f383 8810 	msr	PRIMASK, r3
}
 800291e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002920:	f3ef 8310 	mrs	r3, PRIMASK
 8002924:	61bb      	str	r3, [r7, #24]
  return(result);
 8002926:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002928:	633b      	str	r3, [r7, #48]	; 0x30
 800292a:	2301      	movs	r3, #1
 800292c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f383 8810 	msr	PRIMASK, r3
}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	438a      	bics	r2, r1
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	f383 8810 	msr	PRIMASK, r3
}
 8002950:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	228c      	movs	r2, #140	; 0x8c
 8002956:	2120      	movs	r1, #32
 8002958:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2284      	movs	r2, #132	; 0x84
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e012      	b.n	800298c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2288      	movs	r2, #136	; 0x88
 800296a:	2120      	movs	r1, #32
 800296c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	228c      	movs	r2, #140	; 0x8c
 8002972:	2120      	movs	r1, #32
 8002974:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2284      	movs	r2, #132	; 0x84
 8002986:	2100      	movs	r1, #0
 8002988:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b010      	add	sp, #64	; 0x40
 8002992:	bd80      	pop	{r7, pc}
 8002994:	01ffffff 	.word	0x01ffffff
 8002998:	fffffedf 	.word	0xfffffedf

0800299c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	1dfb      	adds	r3, r7, #7
 80029aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ac:	e051      	b.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	3301      	adds	r3, #1
 80029b2:	d04e      	beq.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b4:	f7fe f924 	bl	8000c00 <HAL_GetTick>
 80029b8:	0002      	movs	r2, r0
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d302      	bcc.n	80029ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e051      	b.n	8002a72 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2204      	movs	r2, #4
 80029d6:	4013      	ands	r3, r2
 80029d8:	d03b      	beq.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xb6>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b80      	cmp	r3, #128	; 0x80
 80029de:	d038      	beq.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xb6>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b40      	cmp	r3, #64	; 0x40
 80029e4:	d035      	beq.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	2208      	movs	r2, #8
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d111      	bne.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2208      	movs	r2, #8
 80029fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 f83c 	bl	8002a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2290      	movs	r2, #144	; 0x90
 8002a08:	2108      	movs	r1, #8
 8002a0a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2284      	movs	r2, #132	; 0x84
 8002a10:	2100      	movs	r1, #0
 8002a12:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e02c      	b.n	8002a72 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	401a      	ands	r2, r3
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d112      	bne.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2280      	movs	r2, #128	; 0x80
 8002a32:	0112      	lsls	r2, r2, #4
 8002a34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f000 f81f 	bl	8002a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2290      	movs	r2, #144	; 0x90
 8002a42:	2120      	movs	r1, #32
 8002a44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2284      	movs	r2, #132	; 0x84
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e00f      	b.n	8002a72 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	425a      	negs	r2, r3
 8002a62:	4153      	adcs	r3, r2
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	001a      	movs	r2, r3
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d09e      	beq.n	80029ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08e      	sub	sp, #56	; 0x38
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a84:	f3ef 8310 	mrs	r3, PRIMASK
 8002a88:	617b      	str	r3, [r7, #20]
  return(result);
 8002a8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a8e:	2301      	movs	r3, #1
 8002a90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f383 8810 	msr	PRIMASK, r3
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4926      	ldr	r1, [pc, #152]	; (8002b40 <UART_EndRxTransfer+0xc4>)
 8002aa6:	400a      	ands	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f383 8810 	msr	PRIMASK, r3
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8002aba:	623b      	str	r3, [r7, #32]
  return(result);
 8002abc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	f383 8810 	msr	PRIMASK, r3
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	491b      	ldr	r1, [pc, #108]	; (8002b44 <UART_EndRxTransfer+0xc8>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	f383 8810 	msr	PRIMASK, r3
}
 8002ae6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d118      	bne.n	8002b22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af0:	f3ef 8310 	mrs	r3, PRIMASK
 8002af4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002af6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afa:	2301      	movs	r3, #1
 8002afc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f383 8810 	msr	PRIMASK, r3
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2110      	movs	r1, #16
 8002b12:	438a      	bics	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f383 8810 	msr	PRIMASK, r3
}
 8002b20:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	228c      	movs	r2, #140	; 0x8c
 8002b26:	2120      	movs	r1, #32
 8002b28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b00e      	add	sp, #56	; 0x38
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	fffffedf 	.word	0xfffffedf
 8002b44:	effffffe 	.word	0xeffffffe

08002b48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2284      	movs	r2, #132	; 0x84
 8002b54:	5c9b      	ldrb	r3, [r3, r2]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_UARTEx_DisableFifoMode+0x16>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e027      	b.n	8002bae <HAL_UARTEx_DisableFifoMode+0x66>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2284      	movs	r2, #132	; 0x84
 8002b62:	2101      	movs	r1, #1
 8002b64:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2288      	movs	r2, #136	; 0x88
 8002b6a:	2124      	movs	r1, #36	; 0x24
 8002b6c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2101      	movs	r1, #1
 8002b82:	438a      	bics	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a0b      	ldr	r2, [pc, #44]	; (8002bb8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2288      	movs	r2, #136	; 0x88
 8002ba0:	2120      	movs	r1, #32
 8002ba2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2284      	movs	r2, #132	; 0x84
 8002ba8:	2100      	movs	r1, #0
 8002baa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	0018      	movs	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b004      	add	sp, #16
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	dfffffff 	.word	0xdfffffff

08002bbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2284      	movs	r2, #132	; 0x84
 8002bca:	5c9b      	ldrb	r3, [r3, r2]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e02e      	b.n	8002c32 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2284      	movs	r2, #132	; 0x84
 8002bd8:	2101      	movs	r1, #1
 8002bda:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2288      	movs	r2, #136	; 0x88
 8002be0:	2124      	movs	r1, #36	; 0x24
 8002be2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	438a      	bics	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	08d9      	lsrs	r1, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	0018      	movs	r0, r3
 8002c14:	f000 f854 	bl	8002cc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2288      	movs	r2, #136	; 0x88
 8002c24:	2120      	movs	r1, #32
 8002c26:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2284      	movs	r2, #132	; 0x84
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b004      	add	sp, #16
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2284      	movs	r2, #132	; 0x84
 8002c4a:	5c9b      	ldrb	r3, [r3, r2]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e02f      	b.n	8002cb4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2284      	movs	r2, #132	; 0x84
 8002c58:	2101      	movs	r1, #1
 8002c5a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2288      	movs	r2, #136	; 0x88
 8002c60:	2124      	movs	r1, #36	; 0x24
 8002c62:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2101      	movs	r1, #1
 8002c78:	438a      	bics	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	4a0e      	ldr	r2, [pc, #56]	; (8002cbc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 f813 	bl	8002cc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2288      	movs	r2, #136	; 0x88
 8002ca6:	2120      	movs	r1, #32
 8002ca8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2284      	movs	r2, #132	; 0x84
 8002cae:	2100      	movs	r1, #0
 8002cb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b004      	add	sp, #16
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	f1ffffff 	.word	0xf1ffffff

08002cc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d108      	bne.n	8002ce2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	226a      	movs	r2, #106	; 0x6a
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2268      	movs	r2, #104	; 0x68
 8002cdc:	2101      	movs	r1, #1
 8002cde:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002ce0:	e043      	b.n	8002d6a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002ce2:	260f      	movs	r6, #15
 8002ce4:	19bb      	adds	r3, r7, r6
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002cea:	200e      	movs	r0, #14
 8002cec:	183b      	adds	r3, r7, r0
 8002cee:	2208      	movs	r2, #8
 8002cf0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	0e5b      	lsrs	r3, r3, #25
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	240d      	movs	r4, #13
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	2107      	movs	r1, #7
 8002d02:	400a      	ands	r2, r1
 8002d04:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	0f5b      	lsrs	r3, r3, #29
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	250c      	movs	r5, #12
 8002d12:	197b      	adds	r3, r7, r5
 8002d14:	2107      	movs	r1, #7
 8002d16:	400a      	ands	r2, r1
 8002d18:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d1a:	183b      	adds	r3, r7, r0
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	197a      	adds	r2, r7, r5
 8002d20:	7812      	ldrb	r2, [r2, #0]
 8002d22:	4914      	ldr	r1, [pc, #80]	; (8002d74 <UARTEx_SetNbDataToProcess+0xb4>)
 8002d24:	5c8a      	ldrb	r2, [r1, r2]
 8002d26:	435a      	muls	r2, r3
 8002d28:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d2a:	197b      	adds	r3, r7, r5
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <UARTEx_SetNbDataToProcess+0xb8>)
 8002d30:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d32:	0019      	movs	r1, r3
 8002d34:	f7fd fa70 	bl	8000218 <__divsi3>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	b299      	uxth	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	226a      	movs	r2, #106	; 0x6a
 8002d40:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d42:	19bb      	adds	r3, r7, r6
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	193a      	adds	r2, r7, r4
 8002d48:	7812      	ldrb	r2, [r2, #0]
 8002d4a:	490a      	ldr	r1, [pc, #40]	; (8002d74 <UARTEx_SetNbDataToProcess+0xb4>)
 8002d4c:	5c8a      	ldrb	r2, [r1, r2]
 8002d4e:	435a      	muls	r2, r3
 8002d50:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002d52:	193b      	adds	r3, r7, r4
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <UARTEx_SetNbDataToProcess+0xb8>)
 8002d58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	f7fd fa5c 	bl	8000218 <__divsi3>
 8002d60:	0003      	movs	r3, r0
 8002d62:	b299      	uxth	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2268      	movs	r2, #104	; 0x68
 8002d68:	5299      	strh	r1, [r3, r2]
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b005      	add	sp, #20
 8002d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	08002e64 	.word	0x08002e64
 8002d78:	08002e6c 	.word	0x08002e6c

08002d7c <memset>:
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	1882      	adds	r2, r0, r2
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d100      	bne.n	8002d86 <memset+0xa>
 8002d84:	4770      	bx	lr
 8002d86:	7019      	strb	r1, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	e7f9      	b.n	8002d80 <memset+0x4>

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	2600      	movs	r6, #0
 8002d90:	4c0c      	ldr	r4, [pc, #48]	; (8002dc4 <__libc_init_array+0x38>)
 8002d92:	4d0d      	ldr	r5, [pc, #52]	; (8002dc8 <__libc_init_array+0x3c>)
 8002d94:	1b64      	subs	r4, r4, r5
 8002d96:	10a4      	asrs	r4, r4, #2
 8002d98:	42a6      	cmp	r6, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	2600      	movs	r6, #0
 8002d9e:	f000 f819 	bl	8002dd4 <_init>
 8002da2:	4c0a      	ldr	r4, [pc, #40]	; (8002dcc <__libc_init_array+0x40>)
 8002da4:	4d0a      	ldr	r5, [pc, #40]	; (8002dd0 <__libc_init_array+0x44>)
 8002da6:	1b64      	subs	r4, r4, r5
 8002da8:	10a4      	asrs	r4, r4, #2
 8002daa:	42a6      	cmp	r6, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	00b3      	lsls	r3, r6, #2
 8002db2:	58eb      	ldr	r3, [r5, r3]
 8002db4:	4798      	blx	r3
 8002db6:	3601      	adds	r6, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	00b3      	lsls	r3, r6, #2
 8002dbc:	58eb      	ldr	r3, [r5, r3]
 8002dbe:	4798      	blx	r3
 8002dc0:	3601      	adds	r6, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	08002e7c 	.word	0x08002e7c
 8002dc8:	08002e7c 	.word	0x08002e7c
 8002dcc:	08002e80 	.word	0x08002e80
 8002dd0:	08002e7c 	.word	0x08002e7c

08002dd4 <_init>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dda:	bc08      	pop	{r3}
 8002ddc:	469e      	mov	lr, r3
 8002dde:	4770      	bx	lr

08002de0 <_fini>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr
